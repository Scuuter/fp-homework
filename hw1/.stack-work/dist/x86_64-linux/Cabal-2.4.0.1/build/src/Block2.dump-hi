
==================== FINAL INTERFACE ====================
2019-03-04 13:01:02.327128015 UTC

interface hw1-0.1.0.0-FwKVBnVJc3p7EC5iMGwF1O:Block2 8063
  interface hash: bf1adcaf4b316217063255a7890065ac
  ABI hash: 2cd4e9e12b5f0ffd63e0f65c0829e499
  export-list hash: 84f0ac72e76ee696154f814a2a1ba0e0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d59a86fc39dabe8754ebbfb830e37f1e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Block2.delete
  Block2.mergeSort
  Block2.randomIntList
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  random-1.1:System.Random 8c06dce30a9b8b4f2b7c15fb3f418e08
15811e0b3b0a8dd269bd15e3be1262b9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Block2.$trModule3
                   Block2.$trModule1) -}
754f170e722442ea66bca0f0c5dcf830
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$trModule2) -}
480bcb08f746b1849a80e2a3d98213cf
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block2"#) -}
6055ecfdb9ba01e51d8c5fe579d5832c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$trModule4) -}
4a403d1daf6497fc3520b7b4f19bfa93
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hw1-0.1.0.0-FwKVBnVJc3p7EC5iMGwF1O"#) -}
384f00d74d6f1ef617582af0a1379413
  $whelper ::
    [a] -> GHC.Types.Int -> [a] -> (# GHC.Maybe.Maybe a, [a] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(1*U)><S,1*U>,
     Inline: [2] -}
d2a389b02b643d2dd145b13df0ed762d
  delete :: GHC.Types.Int -> [a] -> (GHC.Maybe.Maybe a, [a])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*U)><S,1*U>m,
     Unfolding: (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case Block2.$whelper
                        @ a
                        (GHC.Types.[] @ a)
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
1a53ad72ded275096fd0777a121c84a6
  mergeSort :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><S,1*U> -}
9fb7e4e5d30e0ad08a628f00f0586271
  randomIntList ::
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO [GHC.Types.Int]
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Block2.randomIntList1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Types.Int]>_R)) -}
968ccf25327d0c53a2a6bc721086fef3
  randomIntList1 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: (\ (n :: GHC.Types.Int)
                   (from :: GHC.Types.Int)
                   (to :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                 (# ipv,
                    case n of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ GHC.Types.Int
                      1#
                      -> case to of wild2 { GHC.Types.I# i ->
                         case from of wild3 { GHC.Types.I# i1 ->
                         let {
                           rand :: GHC.Integer.Type.Integer = GHC.Integer.Type.smallInteger i1
                         } in
                         let {
                           rand1 :: GHC.Integer.Type.Integer = GHC.Integer.Type.smallInteger i
                         } in
                         letrec {
                           $wgo :: System.Random.StdGen -> GHC.Prim.Int# -> [GHC.Types.Int]
                             {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>, Inline: [2] -}
                           = \ (w :: System.Random.StdGen) (ww :: GHC.Prim.Int#) ->
                             case System.Random.$w$srandomIvalInteger
                                    @ GHC.Types.Int
                                    GHC.Num.$fNumInt
                                    rand
                                    rand1
                                    w of ww3 { (#,#) ww4 ww5 ->
                             case ww4 of x1 { GHC.Types.I# ipv4 ->
                             case ww of ds2 {
                               DEFAULT
                               -> GHC.Types.: @ GHC.Types.Int x1 ($wgo ww5 (GHC.Prim.-# ds2 1#))
                               1#
                               -> GHC.Types.:
                                    @ GHC.Types.Int
                                    x1
                                    (GHC.Types.[] @ GHC.Types.Int) } } }
                         } in
                         $wgo b1 y } } } } #) } } }) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

