
==================== FINAL INTERFACE ====================
2019-03-27 17:08:15.42773879 UTC

interface main:Block1Spec [orphan module] 8064
  interface hash: 6f605118958f2597f080d2dfc315dca9
  ABI hash: 0d1a3c98dadc14e8a1803110bbd8471f
  export-list hash: f08b9debfb37d501b5a25524e36050c2
  orphan hash: 1985b79868686b31d063e89028dacdba
  flag hash: 49d17b1b894f8f05af2f7d38dd4fe82c
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Block1Spec.block1
module dependencies:
package dependencies: QuickCheck-2.12.6.1 ansi-terminal-0.8.2
                      ansi-wl-pprint-0.6.8.2 array-0.5.3.0 async-2.2.1 base-4.12.0.0
                      binary-0.8.6.0 bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2
                      colour-2.3.4 containers-0.6.0.1 deepseq-1.4.4.0 erf-2.0.0.0
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0 hw2-0.1.0.0
                      integer-gmp-1.0.2.0 mtl-2.2.2 optparse-applicative-0.14.3.0
                      pretty-1.1.3.6 primitive-0.6.4.0 process-1.6.5.0 random-1.1
                      stm-2.5.0.0 tagged-0.8.6 tasty-1.2 tasty-hunit-0.10.0.1
                      tasty-quickcheck-0.10 template-haskell-2.14.0.0 text-1.2.3.1
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.6.2
                      unbounded-delays-0.1.1.0 unix-2.7.2.2 wcwidth-0.0.2
orphans: stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show colour-2.3.4:Data.Colour
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.6.0.1:Data.Graph
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray tagged-0.8.6:Data.Tagged
                         tasty-1.2:Test.Tasty.Core
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck bf660067406c963dce88c329bd67a222
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Arbitrary 680b75ef360c6dbef86f3fa8d1a92bdb
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Gen 1596ac1833f07059d8cd2b8f802ebc36
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  hw2-0.1.0.0:Block1 773e38ed4eec9fb84f5566594a6ad5b0
import  -/  tasty-1.2:Test.Tasty 3267efb6b9a17be2b049053c1cdaff08
import  -/  tasty-1.2:Test.Tasty.Core c931ee0793d03a746d590fb679c52fc6
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit 485b522d6b0c9a08b413dcdab322cf64
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit.Orig 594d4cc7224ef0dba5ea2ab140aa8238
import  -/  tasty-quickcheck-0.10:Test.Tasty.QuickCheck 0b390ddac8dfd92265b6b8e17e128886
ceabebe432ac0b1db349fceddc113155
  $fArbitraryNonEmpty ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Block1.NonEmpty a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Block1.NonEmpty a)
                  (Block1Spec.$fArbitraryNonEmpty3 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Block1.NonEmpty a>_R))
                  (\ (ds :: Block1.NonEmpty a) ->
                   GHC.Types.[] @ (Block1.NonEmpty a)) -}
cdaddf1e345350ac5eed7abd21eee92e
  $fArbitraryNonEmpty1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int)[OneShot] ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww1
                        ww2
                        ww3
                        ww4 of ww7 { (#,#) ww8 ww9 ->
                 \ (r1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                   @ GHC.Types.Int
                   r1
                   Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R) ; Nth:2
                                                                               (Nth:3
                                                                                    (<GHC.Types.Int>_R
                                                                                     ->_R <Test.QuickCheck.Gen.Gen
                                                                                             GHC.Types.Int>_R
                                                                                     ->_R Test.QuickCheck.Gen.N:Gen[0]
                                                                                              <GHC.Types.Int>_R)))
                   ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   w3 } }) -}
1b3944489c10d53036255bd7f17c0eef
  $fArbitraryNonEmpty2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>,
     Unfolding: (\ (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int)[OneShot] ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { GHC.Types.I# ww8 ->
                 Test.QuickCheck.Gen.$wlistOf
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                   ww1
                   ww2
                   ww3
                   ww4
                   ww8 } }) -}
47d73431ae1102fa421f728a96372dba
  $fArbitraryNonEmpty3 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Block1.NonEmpty a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Block1Spec.$w$carbitrary
                        @ a
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        w2 of ww7 { (#,#) ww8 ww9 ->
                 Block1.:| @ a ww8 ww9 } }) -}
2236564b4803ebb3da01a8cd232f28ed
  $fArbitraryNonEmpty_$s$carbitrary ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Block1.NonEmpty GHC.Types.Int
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Block1Spec.$w$s$carbitrary
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Block1.:| @ GHC.Types.Int ww8 ww9 } }) -}
2c0ceab699ea634f151b9af23f9b0204
  $fArbitraryNonEmpty_$s$carbitrary1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Block1Spec.$w$s$carbitrary1
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Block1.:| @ (GHC.Types.Int -> GHC.Types.Int) ww8 ww9 } }) -}
22f521d6f8296ab8fb2a12e0dedd327a
  $fArbitraryNonEmpty_$s$carbitrary2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Block1.NonEmpty [GHC.Types.Char]
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Block1Spec.$w$s$carbitrary2
                        ww1
                        ww2
                        ww3
                        ww4
                        w1 of ww7 { (#,#) ww8 ww9 ->
                 Block1.:| @ [GHC.Types.Char] ww8 ww9 } }) -}
ae5b1f93f1ac6fff9d5e07fc9c78b307
  $fArbitraryNonEmpty_$s$fArbitraryNonEmpty ::
    Test.QuickCheck.Arbitrary.Arbitrary (Block1.NonEmpty GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.NonEmpty GHC.Types.Int)
                  Block1Spec.$fArbitraryNonEmpty_$s$carbitrary
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Block1.NonEmpty GHC.Types.Int>_R))
                  (\ (ds :: Block1.NonEmpty GHC.Types.Int) ->
                   GHC.Types.[] @ (Block1.NonEmpty GHC.Types.Int)) -}
b96f9b93a0df0803ac71092b96c7d650
  $fArbitraryNonEmpty_$s$fArbitraryNonEmpty1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                  Block1Spec.$fArbitraryNonEmpty_$s$carbitrary1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)>_R))
                  (\ (ds :: Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)) ->
                   GHC.Types.[]
                     @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))) -}
d105060d7c41865778318493964e3b46
  $fArbitraryNonEmpty_$s$fArbitraryNonEmpty2 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Block1.NonEmpty [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.NonEmpty [GHC.Types.Char])
                  Block1Spec.$fArbitraryNonEmpty_$s$carbitrary2
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Block1.NonEmpty [GHC.Types.Char]>_R))
                  (\ (ds :: Block1.NonEmpty [GHC.Types.Char]) ->
                   GHC.Types.[] @ (Block1.NonEmpty [GHC.Types.Char])) -}
1f74674a615db60a304c97da2caf74f6
  $fArbitraryTree ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Block1.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Block1.Tree a)
                  (Block1Spec.$fArbitraryTree5 @ a v)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R))
                  (\ (ds :: Block1.Tree a) -> GHC.Types.[] @ (Block1.Tree a)) -}
65df4f3431fafb00fab9f75c9a34de1b
  $fArbitraryTree1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Block1.Tree GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Block1Spec.$fArbitraryTree_tree n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree GHC.Types.Int>_R)
                   r
                   n) -}
893c559a8d42a940815ef460df750369
  $fArbitraryTree2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Block1Spec.$fArbitraryTree_tree1 n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <Block1.Tree (GHC.Types.Int -> GHC.Types.Int)>_R)
                   r
                   n) -}
e69f84f8e3c88f25d3ff6c4531f809d6
  $fArbitraryTree3 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Block1.Tree [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Block1Spec.$fArbitraryTree_tree2 n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree [GHC.Types.Char]>_R)
                   r
                   n) -}
1a0e2beb7d4299a7fc484e2a41d3dd5d
  $fArbitraryTree4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Block1.Tree (GHC.Base.String -> GHC.Base.String)
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (r :: Test.QuickCheck.Random.QCGen) (n :: GHC.Types.Int) ->
                 (Block1Spec.$fArbitraryTree_tree3 n)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0]
                      <Block1.Tree (GHC.Base.String -> GHC.Base.String)>_R)
                   r
                   n) -}
93ef1001f53f247669ca2be5541bcb36
  $fArbitraryTree5 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Block1.Tree a
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,U><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Block1Spec.$w$carbitrary1 @ a w w1 ww1 }) -}
d78f3ff1688a955ea392965975ea8225
  $fArbitraryTree6 :: Test.QuickCheck.Gen.Gen (Block1.Tree a)
  {- Strictness: x -}
bc04ea559623da4026529580dd9f6eae
  $fArbitraryTree_$s$fArbitraryTree ::
    Test.QuickCheck.Arbitrary.Arbitrary (Block1.Tree GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree GHC.Types.Int)
                  Block1Spec.$fArbitraryTree1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree GHC.Types.Int>_R))
                  (\ (ds :: Block1.Tree GHC.Types.Int) ->
                   GHC.Types.[] @ (Block1.Tree GHC.Types.Int)) -}
8e24b283dc8bd6b45816032bb127909e
  $fArbitraryTree_$s$fArbitraryTree1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                  Block1Spec.$fArbitraryTree2
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Block1.Tree (GHC.Types.Int -> GHC.Types.Int)>_R))
                  (\ (ds :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)) ->
                   GHC.Types.[] @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))) -}
fde1068f802959fccb23a3bb6e9bd97c
  $fArbitraryTree_$s$fArbitraryTree2 ::
    Test.QuickCheck.Arbitrary.Arbitrary (Block1.Tree [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree [GHC.Types.Char])
                  Block1Spec.$fArbitraryTree3
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Block1.Tree [GHC.Types.Char]>_R))
                  (\ (ds :: Block1.Tree [GHC.Types.Char]) ->
                   GHC.Types.[] @ (Block1.Tree [GHC.Types.Char])) -}
391f3aaaff1f142324d273113980156b
  $fArbitraryTree_$s$fArbitraryTree3 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (Block1.Tree (GHC.Base.String -> GHC.Base.String))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))
                  Block1Spec.$fArbitraryTree4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <Block1.Tree (GHC.Base.String -> GHC.Base.String)>_R))
                  (\ (ds :: Block1.Tree (GHC.Base.String -> GHC.Base.String)) ->
                   GHC.Types.[]
                     @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))) -}
b0d41a8a3b7faf4d6c8a424e78de3d89
  $fArbitraryTree_tree ::
    GHC.Types.Int
    -> Test.QuickCheck.Gen.Gen (Block1.Tree GHC.Types.Int)
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Block1Spec.$wtree ww1 }) -}
137b019fbde8220525587f266ff349fe
  $fArbitraryTree_tree1 ::
    GHC.Types.Int
    -> Test.QuickCheck.Gen.Gen
         (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Block1Spec.$wtree1 ww1 }) -}
7b779364332f474e7483f6484c801d96
  $fArbitraryTree_tree2 ::
    GHC.Types.Int
    -> Test.QuickCheck.Gen.Gen (Block1.Tree [GHC.Types.Char])
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Block1Spec.$wtree2 ww1 }) -}
2ccf6c45af39ee68b5229c3f83368fca
  $fArbitraryTree_tree3 ::
    GHC.Types.Int
    -> Test.QuickCheck.Gen.Gen
         (Block1.Tree (GHC.Base.String -> GHC.Base.String))
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Block1Spec.$wtree3 ww1 }) -}
469a642972db07098267c5706d78d1e6
  $fShow-> :: GHC.Show.Show (GHC.Base.String -> GHC.Base.String)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.String -> GHC.Base.String)
                  Block1Spec.$fShow->_$cshowsPrec
                  Block1Spec.$fShow->_$cshow
                  Block1Spec.$fShow->_$cshowList -}
bc72c3075f695e28b44e4c998d3c5d7b
  $fShow->0 :: GHC.Show.Show (GHC.Types.Int -> GHC.Types.Int)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int -> GHC.Types.Int)
                  Block1Spec.$fShow->0_$cshowsPrec
                  Block1Spec.$fShow->0_$cshow
                  Block1Spec.$fShow->0_$cshowList -}
18c63769e003a62660116ac5d45c80af
  $fShow->0_$cshow ::
    (GHC.Types.Int -> GHC.Types.Int) -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int -> GHC.Types.Int) ->
                 Block1Spec.$fShow->2) -}
ff7e57216187eb86db7104af80f3d507
  $fShow->0_$cshowList ::
    [GHC.Types.Int -> GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Types.Int -> GHC.Types.Int])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   Block1Spec.$fShow->5
                   ls
                   s) -}
22296f0c842519716cb0bfed71f3763f
  $fShow->0_$cshowsPrec ::
    GHC.Types.Int -> (GHC.Types.Int -> GHC.Types.Int) -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: GHC.Types.Int -> GHC.Types.Int)
                   (s :: GHC.Base.String) ->
                 letrec {
                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (ds1 :: [GHC.Types.Char]) ->
                     case ds1 of wild {
                       [] -> s : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                 } in
                 go Block1Spec.$fShow->2) -}
d31224173933500e9725e3fa9ce7543b
  $fShow->1 :: (GHC.Base.String -> GHC.Base.String) -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Base.String -> GHC.Base.String)
                   (s :: GHC.Base.String) ->
                 letrec {
                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> s : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                 } in
                 go Block1Spec.$fShow->2) -}
4c24e688a2d43404348a5b8423e31136
  $fShow->2 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Block1Spec.$fShow->3) -}
d4cea8a2b1bc02fcb42088206fa3edd0
  $fShow->3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Block1Spec.$fShow->4)
                   GHC.Show.$fShow[]1) -}
b63bb73ccca9f9f3631eb61f9cd8715f
  $fShow->4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("function"#) -}
b7794c393b77b43b9a5f5cea4dc1707e
  $fShow->5 :: (GHC.Types.Int -> GHC.Types.Int) -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int -> GHC.Types.Int) (s :: GHC.Base.String) ->
                 letrec {
                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (ds :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> s : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                 } in
                 go Block1Spec.$fShow->2) -}
f619cc9b1c8fa74b916cc3f661151073
  $fShow->_$cshow ::
    (GHC.Base.String -> GHC.Base.String) -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Base.String -> GHC.Base.String) ->
                 Block1Spec.$fShow->2) -}
b9eb3e3d88e513095aea77fa099262c9
  $fShow->_$cshowList ::
    [GHC.Base.String -> GHC.Base.String] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.String -> GHC.Base.String])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.String -> GHC.Base.String)
                   Block1Spec.$fShow->1
                   ls
                   s) -}
ceddb51db815322c75e8d8dd49bf31db
  $fShow->_$cshowsPrec ::
    GHC.Types.Int
    -> (GHC.Base.String -> GHC.Base.String) -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: GHC.Base.String -> GHC.Base.String)
                   (s :: GHC.Base.String) ->
                 letrec {
                   go :: [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (ds1 :: [GHC.Types.Char]) ->
                     case ds1 of wild {
                       [] -> s : y ys -> GHC.Types.: @ GHC.Types.Char y (go ys) }
                 } in
                 go Block1Spec.$fShow->2) -}
e2aeec36d366ab16b42a28c8cc658f63
  $s$fArbitrary-> ::
    Test.QuickCheck.Arbitrary.Arbitrary
      (GHC.Types.Int -> GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int -> GHC.Types.Int)
                  (Test.QuickCheck.Arbitrary.$fArbitrary->1
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                       `cast`
                     ((forall (b :: <*>_N).
                       <GHC.Types.Int>_R
                       ->_R <Test.QuickCheck.Gen.Gen b>_R
                       ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     <b>_R)) ; Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                                        <GHC.Types.Int>_N))
                     Test.QuickCheck.Arbitrary.$fArbitraryInt)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <GHC.Types.Int -> GHC.Types.Int>_R))
                  (\ (ds :: GHC.Types.Int -> GHC.Types.Int) ->
                   GHC.Types.[] @ (GHC.Types.Int -> GHC.Types.Int)) -}
6fa4ec97d817cb63e2263adefc1efde0
  $s$fArbitrary->1 ::
    Test.QuickCheck.Arbitrary.Arbitrary
      ([GHC.Types.Char] -> [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char] -> [GHC.Types.Char])
                  (Test.QuickCheck.Arbitrary.$fArbitrary->1
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     Block1Spec.$s$fArbitrary->2
                       `cast`
                     (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                               <[GHC.Types.Char]>_N))
                     Block1Spec.$s$fArbitrary->_$s$fArbitrary[])
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0]
                            <[GHC.Types.Char] -> [GHC.Types.Char]>_R))
                  (\ (ds :: [GHC.Types.Char] -> [GHC.Types.Char]) ->
                   GHC.Types.[] @ ([GHC.Types.Char] -> [GHC.Types.Char])) -}
1433a681fe062710f016aac338e910c6
  $s$fArbitrary->2 ::
    [GHC.Types.Char]
    -> Test.QuickCheck.Gen.Gen b -> Test.QuickCheck.Gen.Gen b
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Arbitrary.$fCoArbitrary->_$ccoarbitrary
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fCoArbitraryChar1
                     `cast`
                   ((forall (b :: <*>_N).
                     <GHC.Types.Char>_R
                     ->_R <Test.QuickCheck.Gen.Gen b>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   <b>_R)) ; Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0]
                                                      <GHC.Types.Char>_N))) -}
bd529a49457675ff346310235faeef93
  $s$fArbitrary->_$s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrarySet2
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                  (\ (eta :: [GHC.Types.Char]) ->
                   Test.QuickCheck.Arbitrary.shrinkList
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                     eta) -}
f3dbe1a2bd13c74ddb18fe4b64996d2b
  $s$fArbitrary[]_$cshrink :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [GHC.Types.Char]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   eta) -}
c8300b35c60c1f374e301d53694ca334
  $s$fShowNonEmpty ::
    GHC.Show.Show (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                  (Block1.$fShowNonEmpty_$cshowsPrec
                     @ (GHC.Types.Int -> GHC.Types.Int)
                     Block1Spec.$fShow->0)
                  (Block1.$fShowNonEmpty_$cshow
                     @ (GHC.Types.Int -> GHC.Types.Int)
                     Block1Spec.$fShow->0)
                  (\ (ls :: [Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                     (Block1.$fShowNonEmpty_$cshowsPrec
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        Block1Spec.$fShow->0
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
6625b7a6699be522183d008142214dd3
  $s$fShowNonEmpty1 ::
    GHC.Show.Show (Block1.NonEmpty [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.NonEmpty [GHC.Types.Char])
                  (Block1.$fShowNonEmpty_$cshowsPrec
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (Block1.$fShowNonEmpty_$cshow
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (ls :: [Block1.NonEmpty [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.NonEmpty [GHC.Types.Char])
                     (Block1.$fShowNonEmpty_$cshowsPrec
                        @ [GHC.Types.Char]
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
c5cf02dc0c99deadcddcadf0c466864e
  $s$fShowNonEmpty2 :: GHC.Show.Show (Block1.NonEmpty GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.NonEmpty GHC.Types.Int)
                  (Block1.$fShowNonEmpty_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (Block1.$fShowNonEmpty_$cshow @ GHC.Types.Int GHC.Show.$fShowInt)
                  (\ (ls :: [Block1.NonEmpty GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.NonEmpty GHC.Types.Int)
                     (Block1.$fShowNonEmpty_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
2f0ec2dba85ef4d9695e83252b6bab25
  $s$fShowNonEmpty_$cshow2 ::
    Block1.NonEmpty [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: Block1.NonEmpty [GHC.Types.Char]) ->
                 case w1 of ww4 { Block1.:| ww5 ww6 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      ww5
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.$fShow(,)3
                         (GHC.CString.unpackAppendCString#
                            Block1.$fShowNonEmpty1
                            (GHC.Show.showList__
                               @ [GHC.Types.Char]
                               GHC.Show.$fShowChar_$cshowList
                               ww6
                               (GHC.Types.[] @ GHC.Types.Char))))) }) -}
33f6de3f9a3601f1e61a9f012e253b54
  $s$fShowNonEmpty_$cshowList ::
    [Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                   (Block1.$fShowNonEmpty_$cshowsPrec
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      Block1Spec.$fShow->0
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
0dbefa01c0ae514f787d381cb65e6c0f
  $s$fShowNonEmpty_$cshowList1 ::
    [Block1.NonEmpty [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.NonEmpty [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.NonEmpty [GHC.Types.Char])
                   (Block1.$fShowNonEmpty_$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
f245033c428fc328f94c276db6c568b2
  $s$fShowNonEmpty_$cshowList2 ::
    [Block1.NonEmpty GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.NonEmpty GHC.Types.Int])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.NonEmpty GHC.Types.Int)
                   (Block1.$fShowNonEmpty_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
761fbfdc7112839b6a3507e299c3ee99
  $s$fShowNonEmpty_$cshowsPrec ::
    GHC.Types.Int
    -> Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Block1.:| ww3 ww4 ->
                 Block1.$w$cshowsPrec
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   Block1Spec.$fShow->0
                   ww1
                   ww3
                   ww4 } }) -}
ccf81ca0f5206f2a6fb976c26a29b896
  $s$fShowNonEmpty_$cshowsPrec1 ::
    GHC.Types.Int -> Block1.NonEmpty [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Block1.NonEmpty [GHC.Types.Char]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Block1.:| ww3 ww4 ->
                 Block1.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   ww1
                   ww3
                   ww4 } }) -}
bb41c914a0e80f89c247288217c5c6f6
  $s$fShowNonEmpty_$cshowsPrec2 ::
    GHC.Types.Int -> Block1.NonEmpty GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int) (w2 :: Block1.NonEmpty GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Block1.:| ww3 ww4 ->
                 Block1.$w$cshowsPrec
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   ww1
                   ww3
                   ww4 } }) -}
c7c63930215de062c4ed89edc0787c97
  $s$fShowTree ::
    GHC.Show.Show (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                  (Block1.$fShowTree_$cshowsPrec
                     @ (GHC.Types.Int -> GHC.Types.Int)
                     Block1Spec.$fShow->0)
                  (\ (x :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)) ->
                   Block1.$fShowTree_$cshowsPrec
                     @ (GHC.Types.Int -> GHC.Types.Int)
                     Block1Spec.$fShow->0
                     Block1.$fFoldableTree9
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Block1.Tree (GHC.Types.Int -> GHC.Types.Int)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                     (Block1.$fShowTree_$cshowsPrec
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        Block1Spec.$fShow->0
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
c24bb6e52d63be1417f4a71a18633c48
  $s$fShowTree1 ::
    GHC.Show.Show (Block1.Tree (GHC.Base.String -> GHC.Base.String))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))
                  (Block1.$fShowTree_$cshowsPrec
                     @ (GHC.Base.String -> GHC.Base.String)
                     Block1Spec.$fShow->)
                  (\ (x :: Block1.Tree (GHC.Base.String -> GHC.Base.String)) ->
                   Block1.$fShowTree_$cshowsPrec
                     @ (GHC.Base.String -> GHC.Base.String)
                     Block1Spec.$fShow->
                     Block1.$fFoldableTree9
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Block1.Tree (GHC.Base.String -> GHC.Base.String)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))
                     (Block1.$fShowTree_$cshowsPrec
                        @ (GHC.Base.String -> GHC.Base.String)
                        Block1Spec.$fShow->
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
062d5c235cc3a988018dbd076ebe94d0
  $s$fShowTree2 :: GHC.Show.Show (Block1.Tree [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree [GHC.Types.Char])
                  (Block1.$fShowTree_$cshowsPrec
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (x :: Block1.Tree [GHC.Types.Char]) ->
                   Block1.$fShowTree_$cshowsPrec
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Block1.$fFoldableTree9
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Block1.Tree [GHC.Types.Char]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.Tree [GHC.Types.Char])
                     (Block1.$fShowTree_$cshowsPrec
                        @ [GHC.Types.Char]
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
b3afd68dc4d7061e61365204a971eecc
  $s$fShowTree3 :: GHC.Show.Show (Block1.Tree GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Block1.Tree GHC.Types.Int)
                  (Block1.$fShowTree_$cshowsPrec @ GHC.Types.Int GHC.Show.$fShowInt)
                  (\ (x :: Block1.Tree GHC.Types.Int) ->
                   Block1.$fShowTree_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     Block1.$fFoldableTree9
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Block1.Tree GHC.Types.Int]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Block1.Tree GHC.Types.Int)
                     (Block1.$fShowTree_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        Block1.$fFoldableTree9)
                     ls
                     s) -}
228388089327d80567fe7c7feb1ac6ad
  $s$fShowTree_$cshow ::
    Block1.Tree (GHC.Types.Int -> GHC.Types.Int) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)) ->
                 Block1.$fShowTree_$cshowsPrec
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   Block1Spec.$fShow->0
                   Block1.$fFoldableTree9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6f3d289829c7f090ab26195457ce7834
  $s$fShowTree_$cshow1 ::
    Block1.Tree (GHC.Base.String -> GHC.Base.String) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Block1.Tree (GHC.Base.String -> GHC.Base.String)) ->
                 Block1.$fShowTree_$cshowsPrec
                   @ (GHC.Base.String -> GHC.Base.String)
                   Block1Spec.$fShow->
                   Block1.$fFoldableTree9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bbd70e6441a60401333a27e3165411a6
  $s$fShowTree_$cshow2 ::
    Block1.Tree [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Block1.Tree [GHC.Types.Char]) ->
                 Block1.$fShowTree_$cshowsPrec
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Block1.$fFoldableTree9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5e35cf2ef674a18518cca28ab92c2541
  $s$fShowTree_$cshow3 ::
    Block1.Tree GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Block1.Tree GHC.Types.Int) ->
                 Block1.$fShowTree_$cshowsPrec
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   Block1.$fFoldableTree9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6a260b952f7e7ed26b366e8e200ab172
  $s$fShowTree_$cshowList ::
    [Block1.Tree (GHC.Types.Int -> GHC.Types.Int)] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.Tree (GHC.Types.Int -> GHC.Types.Int)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                   (Block1.$fShowTree_$cshowsPrec
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      Block1Spec.$fShow->0
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
1d051ee43c306b39a1cdd5431413f4f7
  $s$fShowTree_$cshowList1 ::
    [Block1.Tree (GHC.Base.String -> GHC.Base.String)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.Tree (GHC.Base.String -> GHC.Base.String)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))
                   (Block1.$fShowTree_$cshowsPrec
                      @ (GHC.Base.String -> GHC.Base.String)
                      Block1Spec.$fShow->
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
83413efe2416355d040a4399b8604d4d
  $s$fShowTree_$cshowList2 ::
    [Block1.Tree [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.Tree [GHC.Types.Char]]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.Tree [GHC.Types.Char])
                   (Block1.$fShowTree_$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
15775c9c6decc79997cbbb247ca49d49
  $s$fShowTree_$cshowList3 ::
    [Block1.Tree GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block1.Tree GHC.Types.Int]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Block1.Tree GHC.Types.Int)
                   (Block1.$fShowTree_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      Block1.$fFoldableTree9)
                   ls
                   s) -}
0518842374014dd072267cfd02e209c1
  $s$fShowTree_$cshowsPrec ::
    GHC.Types.Int
    -> Block1.Tree (GHC.Types.Int -> GHC.Types.Int) -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Block1.$w$cshowsPrec1
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   Block1Spec.$fShow->0
                   ww1
                   w2 }) -}
0006f3b3c406c8cd2ea8fe4546156069
  $s$fShowTree_$cshowsPrec1 ::
    GHC.Types.Int
    -> Block1.Tree (GHC.Base.String -> GHC.Base.String)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Block1.Tree (GHC.Base.String -> GHC.Base.String)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Block1.$w$cshowsPrec1
                   @ (GHC.Base.String -> GHC.Base.String)
                   Block1Spec.$fShow->
                   ww1
                   w2 }) -}
93ef0a973a8490888bb4584bd3537c10
  $s$fShowTree_$cshowsPrec2 ::
    GHC.Types.Int -> Block1.Tree [GHC.Types.Char] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int) (w2 :: Block1.Tree [GHC.Types.Char]) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Block1.$w$cshowsPrec1
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   ww1
                   w2 }) -}
e633f704de45032d412eadb63e1ff320
  $s$fShowTree_$cshowsPrec3 ::
    GHC.Types.Int -> Block1.Tree GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int) (w2 :: Block1.Tree GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Block1.$w$cshowsPrec1
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   ww1
                   w2 }) -}
0d42b65ce1edbf8c6c4f4239489a6f23
  $s$fTestable->12 ::
    (Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
     -> Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
                         -> Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$ww1 w ww1 ww2 ww3 ww4 w2 }) -}
5f53de2c59551d273213106bc2a2b7c5
  $s$fTestable->13 ::
    (Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wlvl1 w ww1 ww2 ww3 ww4 w2 }) -}
32e97585616464dc79e72cc02080b6aa
  $s$fTestable->18 ::
    (Block1.Tree (GHC.Base.String -> GHC.Base.String)
     -> Block1.Tree GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.Tree (GHC.Base.String -> GHC.Base.String)
                         -> Block1.Tree GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$ww3 w ww1 ww2 ww3 ww4 w2 }) -}
8b49f3a0545656a08905876c33e4f28d
  $s$fTestable->19 ::
    (Block1.Tree GHC.Base.String -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.Tree GHC.Base.String -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wlvl2 w ww1 ww2 ww3 ww4 w2 }) -}
f8685c38227a6ac1ba1153812cd5ff67
  $s$fTestable->22 ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Char] -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
b5bcec50282760478e30dbde39c13d56
  $s$fTestable->3 ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
e45d6b0e1839467fe37bf7546a0ef09b
  $s$fTestable->6 ::
    (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
     -> Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
                         -> Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$ww2 w ww1 ww2 ww3 ww4 w2 }) -}
e7abd20843c98be896d44d4bdf47cdbd
  $s$fTestable->7 ::
    (Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wlvl w ww1 ww2 ww3 ww4 w2 }) -}
35a2594043b9cdd769529f991f1ca4db
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Block1Spec.$trModule3
                   Block1Spec.$trModule1) -}
5defa28d1250ccaff79f12f5d4984c87
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block1Spec.$trModule2) -}
bea587804ff3fcce02c2a7ce756605cb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block1Spec"#) -}
007ba82c75cc5422aea33d79c6e3d00d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block1Spec.$trModule4) -}
856eb6e69c023dc1f8abaf2173ce23ca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
e0ecfc04d99a1dcca353ab8375a18e1b
  $w$carbitrary ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, [a] #)
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w1,
                    Test.QuickCheck.Arbitrary.$fArbitrarySet2
                      @ a
                      w
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w1 #) } } }) -}
9537321ebec13636e71f7a95e9764a07
  $w$carbitrary1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Prim.Int# -> Block1.Tree a
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,U><S,U>, Inline: [2],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (ww :: GHC.Prim.Int#) ->
                 let {
                   lvl80 :: Test.QuickCheck.Random.QCGen
                            -> GHC.Types.Int -> Block1.Tree a
                     {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
                        Inline: [2],
                        Unfolding: InlineRule (2, True, False)
                                   (\ (w2 :: Test.QuickCheck.Random.QCGen) (w3 :: GHC.Types.Int) ->
                                    case w2
                                           `cast`
                                         (Test.QuickCheck.Random.N:QCGen[0]) of ww1 { System.Random.TF.Gen.TFGen ww2 ww3 ww4 ww5 ww6 ww7 ->
                                    case System.Random.TF.Gen.$wtfGenSplit
                                           ww2
                                           ww3
                                           ww4
                                           ww5 of ww8 { (#,#) ww9 ww10 ->
                                    Block1.Leaf
                                      @ a
                                      ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                                         `cast`
                                       (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                                         ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                         w3) } }) -}
                   = \ (w2 :: Test.QuickCheck.Random.QCGen) (w3 :: GHC.Types.Int) ->
                     case w2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww1 { System.Random.TF.Gen.TFGen ww2 ww3 ww4 ww5 ww6 ww7 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww2
                            ww3
                            ww4
                            ww5 of ww8 { (#,#) ww9 ww10 ->
                     Block1.Leaf
                       @ a
                       ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                          `cast`
                        (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                          ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                          w3) } }
                 } in
                 letrec {
                   $wtree4 :: GHC.Prim.Int# -> Test.QuickCheck.Gen.Gen (Block1.Tree a)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
                   = \ (ww1 :: GHC.Prim.Int#) ->
                     case ww1 of wild {
                       DEFAULT
                       -> case GHC.Prim.># wild 0# of lwild {
                            DEFAULT -> Block1Spec.$fArbitraryTree6 @ a
                            1#
                            -> let {
                                 tree' :: Test.QuickCheck.Gen.Gen (Block1.Tree a)
                                 = $wtree4 (GHC.Prim.uncheckedIShiftRA# wild 1#)
                               } in
                               Test.QuickCheck.Gen.oneof
                                 @ (Block1.Tree a)
                                 (GHC.Types.:
                                    @ (Test.QuickCheck.Gen.Gen (Block1.Tree a))
                                    lvl80
                                      `cast`
                                    (Sym (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R))
                                    (GHC.Types.:
                                       @ (Test.QuickCheck.Gen.Gen (Block1.Tree a))
                                       (\ (w2 :: Test.QuickCheck.Random.QCGen)
                                          (w3 :: GHC.Types.Int) ->
                                        case w2
                                               `cast`
                                             (Test.QuickCheck.Random.N:QCGen[0]) of ww2 { System.Random.TF.Gen.TFGen ww3 ww4 ww5 ww6 ww7 ww8 ->
                                        case System.Random.TF.Gen.$wtfGenSplit
                                               ww3
                                               ww4
                                               ww5
                                               ww6 of ww9 { (#,#) ww10 ww11 ->
                                        case ww11 of ww12 { System.Random.TF.Gen.TFGen ww13 ww14 ww15 ww16 ww17 ww18 ->
                                        case System.Random.TF.Gen.$wtfGenSplit
                                               ww13
                                               ww14
                                               ww15
                                               ww16 of ww19 { (#,#) ww20 ww21 ->
                                        Block1.Branch
                                          @ a
                                          (tree'
                                             `cast`
                                           (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R)
                                             ww10 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                             w3)
                                          (tree'
                                             `cast`
                                           (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R)
                                             ww20 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                             w3) } } } })
                                         `cast`
                                       (Sym (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R))
                                       (GHC.Types.[]
                                          @ (Test.QuickCheck.Gen.Gen (Block1.Tree a))))) }
                       0#
                       -> lvl80
                            `cast`
                          (Sym (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R)) }
                 } in
                 ($wtree4 ww)
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Block1.Tree a>_R)
                   w1
                   (GHC.Types.I# ww)) -}
9572b11b24f371928e9bfc5366fcac92
  $w$dTestable ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   Test.QuickCheck.Arbitrary.$fArbitraryInt
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
cd6cef368c4c6426f1acfe80bd64286f
  $w$dTestable1 ::
    ([GHC.Types.Char] -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: [GHC.Types.Char] -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ [GHC.Types.Char]
                   @ GHC.Types.Bool
                   Block1Spec.$s$fArbitrary->_$s$fArbitrary[]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
c97145f225f281311f893c1d5cffd755
  $w$s$carbitrary ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Int, [GHC.Types.Int] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Int
                      Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
2a7e95d5591df5180762d963392e0e0d
  $w$s$carbitrary1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Int -> GHC.Types.Int,
          [GHC.Types.Int -> GHC.Types.Int] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case ww8 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww18
                           ww19
                           ww20
                           ww21 of ww24 { (#,#) ww25 ww26 ->
                    \ (r1 :: GHC.Types.Int) ->
                    Test.QuickCheck.Arbitrary.$fCoArbitraryChar2
                      @ GHC.Types.Int
                      r1
                      Test.QuickCheck.Arbitrary.$fArbitrary1IntMap_$sarbitrarySizedIntegral
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R) ; Nth:2
                                                                                  (Nth:3
                                                                                       (<GHC.Types.Int>_R
                                                                                        ->_R <Test.QuickCheck.Gen.Gen
                                                                                                GHC.Types.Int>_R
                                                                                        ->_R Test.QuickCheck.Gen.N:Gen[0]
                                                                                                 <GHC.Types.Int>_R)))
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w } },
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      Block1Spec.$fArbitraryNonEmpty1
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                <GHC.Types.Int -> GHC.Types.Int>_R))
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
fb418a84e54aaf27b96c294b6d658ebc
  $w$s$carbitrary2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# [GHC.Types.Char], [[GHC.Types.Char]] #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# case ww8 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ GHC.Types.Char
                      Test.QuickCheck.Arbitrary.$fArbitraryChar_$carbitrary
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } },
                    case ww15 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                    case w of ww24 { GHC.Types.I# ww25 ->
                    Test.QuickCheck.Gen.$wlistOf
                      @ [GHC.Types.Char]
                      Block1Spec.$fArbitraryNonEmpty2
                        `cast`
                      (Sym (Test.QuickCheck.Gen.N:Gen[0] <[GHC.Types.Char]>_R))
                      ww18
                      ww19
                      ww20
                      ww21
                      ww25 } } #) } } }) -}
8b02d14b1f6c88d1bee9eb80d5731821
  $wblock1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (GHC.Base.String -> GHC.Base.String)
                   @ (GHC.Base.String -> GHC.Types.Bool)
                   Block1Spec.$s$fArbitrary->1
                   Block1Spec.$fShow->
                   Block1Spec.$s$fTestable->22
                     `cast`
                   ((<[GHC.Types.Char] -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w3
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
c4fd761977b588b4f495e5c1ffff20fb
  $wblock10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (GHC.Base.String -> GHC.Base.String)
                   @ (GHC.Base.String -> GHC.Types.Bool)
                   Block1Spec.$s$fArbitrary->1
                   Block1Spec.$fShow->
                   Block1Spec.$s$fTestable->22
                     `cast`
                   ((<[GHC.Types.Char] -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <[GHC.Types.Char]
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w10
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
fbec3bfc07dad6af4f04c25c6433974c
  $wblock11 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   @ (GHC.Types.Int -> GHC.Types.Bool)
                   Block1Spec.$s$fArbitrary->
                   Block1Spec.$fShow->0
                   Block1Spec.$s$fTestable->3
                     `cast`
                   ((<GHC.Types.Int -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w11
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
1ffd2a4f8321d8a33398be13957d7096
  $wblock12 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))
                   @ (Block1.Tree (GHC.Base.String -> GHC.Base.String)
                      -> Block1.Tree GHC.Base.String -> GHC.Types.Bool)
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree3
                   Block1Spec.$s$fShowTree1
                   Block1Spec.$s$fTestable->18
                     `cast`
                   ((<Block1.Tree (GHC.Base.String -> GHC.Base.String)
                      -> Block1.Tree GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Block1.Tree
                                                                                                                                       (GHC.Base.String
                                                                                                                                        -> GHC.Base.String)
                                                                                                                                     -> Block1.Tree
                                                                                                                                          GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w12
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
33eaa6832bc50fb8ce56aa13e3c3ef88
  $wblock13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                   @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
                      -> Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree1
                   Block1Spec.$s$fShowTree
                   Block1Spec.$s$fTestable->12
                     `cast`
                   ((<Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
                      -> Block1.Tree GHC.Types.Int -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Block1.Tree
                                                                                                                                       (GHC.Types.Int
                                                                                                                                        -> GHC.Types.Int)
                                                                                                                                     -> Block1.Tree
                                                                                                                                          GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w13
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
c3a0ea3275b71319ea8f94f28f533c74
  $wblock14 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree2
                   Block1Spec.$s$fShowTree2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w14
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
fa0616a920500a9c98180dbc3afca5b1
  $wblock15 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree
                   Block1Spec.$s$fShowTree3
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w15
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
7ba68bf8ee1ded39e63f6da836d223bc
  $wblock16 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree2
                   Block1Spec.$s$fShowTree2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w16
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
e361328fa8af3b979935111ec09903c0
  $wblock17 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree
                   Block1Spec.$s$fShowTree3
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w17
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
0793da804abf3e07c444ef7e3d714ee2
  $wblock18 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree2
                   Block1Spec.$s$fShowTree2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w18
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
cf2e64596a2e14ff5d1a217c5698a6f8
  $wblock19 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree
                   Block1Spec.$s$fShowTree3
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w19
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
650582f6e82bc094d125c198fabe71b9
  $wblock2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   @ (GHC.Types.Int -> GHC.Types.Bool)
                   Block1Spec.$s$fArbitrary->
                   Block1Spec.$fShow->0
                   Block1Spec.$s$fTestable->3
                     `cast`
                   ((<GHC.Types.Int -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w1
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
836a18641a27ebe9ae7eeb7699ce0144
  $wblock3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                   @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
                      -> Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty1
                   Block1Spec.$s$fShowNonEmpty
                   Block1Spec.$s$fTestable->6
                     `cast`
                   ((<Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
                      -> Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Block1.NonEmpty
                                                                                                                                       (GHC.Types.Int
                                                                                                                                        -> GHC.Types.Int)
                                                                                                                                     -> Block1.NonEmpty
                                                                                                                                          GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   Block1Spec.block1_w2
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
e86c99e3782782f2f59ae15d7f635f6f
  $wblock4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty2
                   Block1Spec.$s$fShowNonEmpty1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w4
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
e3006c9c0427a0a368687bc531276ed8
  $wblock5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty
                   Block1Spec.$s$fShowNonEmpty2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w5
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
032131a17327960ac26321daf924cae3
  $wblock6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty2
                   Block1Spec.$s$fShowNonEmpty1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w6
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
c7528c345b703ec616384cea4e27a31c
  $wblock7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty
                   Block1Spec.$s$fShowNonEmpty2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w7
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
fdeae91178b1906ec0df759b62936c85
  $wblock8 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty2
                   Block1Spec.$s$fShowNonEmpty1
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w8
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
41acf1ff3dda37f6bcb706b3724ce42c
  $wblock9 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty
                   Block1Spec.$s$fShowNonEmpty2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Block1Spec.block1_w9
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
4c01665546d4b755bfe8b72c5f1f853a
  $wlvl ::
    (Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Block1.NonEmpty GHC.Types.Int
                         -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty
                   Block1Spec.$s$fShowNonEmpty2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
fd6dd29a75bc89c0869b661d3d0ae8f3
  $wlvl1 ::
    (Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Types.Int)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree
                   Block1Spec.$s$fShowTree3
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
f066f241a7557287197b57e057daa6dc
  $wlvl2 ::
    (Block1.Tree GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Block1.Tree GHC.Base.String -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree GHC.Base.String)
                   @ GHC.Types.Bool
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree2
                   Block1Spec.$s$fShowTree2
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
aac0507557c38ed65740effaf2989e75
  $wtree ::
    GHC.Prim.Int#
    -> Test.QuickCheck.Gen.Gen (Block1.Tree GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
db31a6516cc21113cd25346b6ec8dff9
  $wtree1 ::
    GHC.Prim.Int#
    -> Test.QuickCheck.Gen.Gen
         (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
565652094cf243837e70dd67379cf9e9
  $wtree2 ::
    GHC.Prim.Int#
    -> Test.QuickCheck.Gen.Gen (Block1.Tree [GHC.Types.Char])
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
61b03c1ad7b6dc7be1b200183b4f690d
  $wtree3 ::
    GHC.Prim.Int#
    -> Test.QuickCheck.Gen.Gen
         (Block1.Tree (GHC.Base.String -> GHC.Base.String))
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
b069528f193418b3c626ea3bb8331b15
  $ww1 ::
    (Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
     -> Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
                         -> Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                   @ (Block1.Tree GHC.Types.Int -> GHC.Types.Bool)
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree1
                   Block1Spec.$s$fShowTree
                   Block1Spec.$s$fTestable->13
                     `cast`
                   ((<Block1.Tree GHC.Types.Int -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Block1.Tree
                                                                                                                                       GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
a1b24746251a25188c0b75676402cbad
  $ww2 ::
    (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
     -> Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Block1.NonEmpty
                           (GHC.Types.Int -> GHC.Types.Int)
                         -> Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                   @ (Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool)
                   Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty1
                   Block1Spec.$s$fShowNonEmpty
                   Block1Spec.$s$fTestable->7
                     `cast`
                   ((<Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Block1.NonEmpty
                                                                                                                                       GHC.Types.Int
                                                                                                                                     -> GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
2f6fb9cdeae894cc6078096f8930fdff
  $ww3 ::
    (Block1.Tree (GHC.Base.String -> GHC.Base.String)
     -> Block1.Tree GHC.Base.String -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ (w :: Block1.Tree
                           (GHC.Base.String -> GHC.Base.String)
                         -> Block1.Tree GHC.Base.String -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ (Block1.Tree (GHC.Base.String -> GHC.Base.String))
                   @ (Block1.Tree GHC.Base.String -> GHC.Types.Bool)
                   Block1Spec.$fArbitraryTree_$s$fArbitraryTree3
                   Block1Spec.$s$fShowTree1
                   Block1Spec.$s$fTestable->19
                     `cast`
                   ((<Block1.Tree GHC.Base.String -> GHC.Types.Bool>_R
                     ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                   (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.QuickCheck.Property.N:Testable[0]
                                                                                                                                    <Block1.Tree
                                                                                                                                       GHC.Base.String
                                                                                                                                     -> GHC.Types.Bool>_N))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
46b71eccaf67d5626e559b68d7dc1c19
  $ww4 ::
    (GHC.Types.Int -> GHC.Types.Int)
    -> [GHC.Types.Int -> GHC.Types.Int]
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> [GHC.Types.Int -> GHC.Types.Int]
    -> GHC.Types.Int
    -> [GHC.Types.Int]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int -> GHC.Types.Int)
                   (ww1 :: [GHC.Types.Int -> GHC.Types.Int])
                   (ww2 :: GHC.Types.Int -> GHC.Types.Int)
                   (ww3 :: [GHC.Types.Int -> GHC.Types.Int])
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: [GHC.Types.Int]) ->
                 case Block1.$w$c<*>
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        @ ((GHC.Types.Int -> GHC.Types.Int)
                           -> GHC.Types.Int -> GHC.Types.Int)
                        (GHC.Base.. @ GHC.Types.Int @ GHC.Types.Int @ GHC.Types.Int)
                        (GHC.Types.[]
                           @ ((GHC.Types.Int -> GHC.Types.Int)
                              -> (GHC.Types.Int -> GHC.Types.Int)
                              -> GHC.Types.Int
                              -> GHC.Types.Int))
                        ww
                        ww1 of ww6 { (#,#) ww7 ww8 ->
                 case Block1.$w$c<*>
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        ww7
                        ww8
                        ww2
                        ww3 of ww9 { (#,#) ww10 ww11 ->
                 case Block1.$w$c<*>
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        ww10
                        ww11
                        ww4
                        ww5 of ww12 { (#,#) ww13 ww14 ->
                 case Block1.$w$c<*>
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        ww2
                        ww3
                        ww4
                        ww5 of ww15 { (#,#) ww16 ww17 ->
                 case Block1.$w$c<*>
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        ww
                        ww1
                        ww16
                        ww17 of ww18 { (#,#) ww19 ww20 ->
                 case ww13 of wild { GHC.Types.I# x ->
                 case ww19 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.==# x y of lwild {
                   DEFAULT -> GHC.Types.False
                   1# -> GHC.Classes.$fEq[]_$s$c== ww14 ww20 } } } } } } } }) -}
33820209979fdd0c4327c4ec0428e50d
  $ww5 :: GHC.Base.String -> [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: [GHC.Base.String]) ->
                 case Block1.$w$c<*>
                        @ GHC.Base.String
                        @ GHC.Base.String
                        (GHC.Base.id @ GHC.Base.String)
                        (GHC.Types.[] @ (GHC.Base.String -> GHC.Base.String))
                        ww
                        ww1 of ww6 { (#,#) ww7 ww8 ->
                 case GHC.Classes.$fEqModule_$s$c== ww7 ww of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.$fEq[]_$s$c==1 ww8 ww1 } }) -}
338670d150a62996d792c84edabe47a1
  $ww6 :: GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: [GHC.Types.Int]) ->
                 case Block1.$w$c<*>
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        (GHC.Base.id @ GHC.Types.Int)
                        (GHC.Types.[] @ (GHC.Types.Int -> GHC.Types.Int))
                        (GHC.Types.I# ww)
                        ww1 of ww6 { (#,#) ww7 ww8 ->
                 case ww7 of wild { GHC.Types.I# x ->
                 case GHC.Prim.==# x ww of lwild {
                   DEFAULT -> GHC.Types.False
                   1# -> GHC.Classes.$fEq[]_$s$c== ww8 ww1 } } }) -}
f75367500dbe222d4931a63dbaa76f75
  $ww7 :: GHC.Base.String -> [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: [GHC.Base.String]) ->
                 case GHC.Classes.$fEqModule_$s$c==
                        (GHC.List.reverse1
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char Block1Spec.block38 ww)
                           (GHC.Types.[] @ GHC.Types.Char))
                        (GHC.List.reverse1
                           @ GHC.Types.Char
                           (GHC.Types.: @ GHC.Types.Char Block1Spec.block38 ww)
                           (GHC.Types.[] @ GHC.Types.Char)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$s$c==1
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           Block1Spec.block37
                           ww1)
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           Block1Spec.block37
                           ww1) }) -}
8d51b143abca2e70930c24dd04f8a25d
  $ww8 :: GHC.Base.String -> [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: [GHC.Base.String]) ->
                 case GHC.Classes.$fEqModule_$s$c== ww ww of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.$fEq[]_$s$c==1 ww1 ww1 }) -}
fb895e6e26ddc5f884c7c1651a80699c
  block1 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Block1Spec.block167
                   Block1Spec.block2) -}
dbf0c57a335b171652ddb2f02acf3e56
  block10 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block31
                   Block1Spec.block11) -}
f05b495a60ca03885e2e1e57b260b23c
  block100 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block104
                   Block1Spec.block101
                     `cast`
                   (Nth:3
                        (<Block1.Tree GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
d929702bbd967fb499fbe399e56063fc
  block101 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock17 ww1 ww2 ww3 ww4 w1 }) -}
3db942a064f59c813ec5ab25a82050a6
  block102 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 2#) }) -}
653cd27d362a00be6b14d1deb44f5c80
  block103 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.*# x 2#) }) -}
8a90d8d2f6b6a885ed14c53b55e18c90
  block104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block105) -}
6ca880b80b211316aa826d24d4e10005
  block105 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fmap (f . g) == fmap f . fmap g (Tree Int)"#) -}
6c4d116d9f57f98375a38671c0737102
  block106 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block108
                   Block1Spec.block107
                     `cast`
                   (Nth:3
                        (<Block1.Tree GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
57411e6d06c3a0d93e28e9bdb904ea0e
  block107 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock18 ww1 ww2 ww3 ww4 w1 }) -}
bd48a67318fddd7d0717a89468fb21c6
  block108 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block109) -}
bee2631e5a42ec9c2e6d7c92cf87c281
  block109 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fmap id == id (Tree String)"#) -}
9daedfc6baf99251e6918e335d6e6279
  block11 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block27
                   Block1Spec.block12) -}
4b6f34628fa30b67d0f42b0c785e5fde
  block110 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block112
                   Block1Spec.block111
                     `cast`
                   (Nth:3
                        (<Block1.Tree GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
e49ca960f5c5469c09c1c20b8626ea9d
  block111 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock19 ww1 ww2 ww3 ww4 w1 }) -}
9bcff8b86190a47cca7659e0e9543edc
  block112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block113) -}
ca088e59b7e3523c7deb56469ddca87c
  block113 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fmap id == id (Tree Int)"#) -}
88317d0da52c0f638791690fb51f71c4
  block114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block115) -}
96a0bad911e8f3a0679fa585319a8aea
  block115 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tree typeclasses laws test"#) -}
1229f57af36e2da9cbce4306ceedfa51
  block116 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Block1Spec.block165
                   Block1Spec.block117) -}
b003aa282201fec8422f60247fccc648
  block117 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block159
                   Block1Spec.block118) -}
6544f5e0013375e07670143a366bcc66
  block118 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block153
                   Block1Spec.block119) -}
f486d37f98565e79ff2bcd83aa6b983b
  block119 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block147
                   Block1Spec.block120) -}
739fe6135a01dcd1a1b7b3da5a78575f
  block12 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block23
                   Block1Spec.block13) -}
c2fc6cc5c1fd53c64afeb61a0232f988
  block120 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block141
                   Block1Spec.block121) -}
4b98d98a8c4838e6593e4c8b411f686d
  block121 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block136
                   Block1Spec.block122) -}
ab92ecd8482c11d43c00f697e208e516
  block122 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block130
                   Block1Spec.block123) -}
9e83312830c43b2d5cd1a7512bbac236
  block123 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block124
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
93741d196355a444ed7f0103cdacd4e3
  block124 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block128
                   Block1Spec.block125
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
f273dd8e38424a29f47b46898386acb1
  block125 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go
                        (GHC.CString.unpackCString# Block1Spec.block127) of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block1Spec.block126 s a1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
d0b496a00f650a5c4142f87de277a482
  block126 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [GHC.Types.Int] -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,1*U>x -}
b28a24bacb7ede2e2420b32ce1894b4d
  block127 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 2 3.4"#) -}
b2149b7ee1ac9891f69e5fcd1684d8e4
  block128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block129) -}
962a6da51d425795e5a1cb4b94ae1d98
  block129 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invalid input 2"#) -}
a1876e33bf1b080d20442c73d6a5482f
  block13 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block19
                   Block1Spec.block14) -}
41c5e3c0edae2c73c9bc05a76c72fd2f
  block130 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block134
                   Block1Spec.block131
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
2c8b153bb819b92e173524dda6e38b65
  block131 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go
                        (GHC.CString.unpackCString# Block1Spec.block133) of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block1Spec.block132 s a1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
1db25ecd1cac91aec031eb815da0e141
  block132 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [GHC.Types.Int] -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,1*U>x -}
d5146e285f1f0f957712f09ca64c8dee
  block133 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 a 3"#) -}
5740e8b0cf8bcc78806ce84376bc04d2
  block134 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block135) -}
44b792c02db224a85265257669ee0396
  block135 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invalid input 1"#) -}
5fe63e5587b41d4b02b9377ea326a862
  block136 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block139
                   Block1Spec.block137
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
6390c1cd520ece10bf17169018087c4a
  block137 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Maybe.Nothing
                   -> case Block1Spec.block138 s (GHC.Maybe.Nothing @ GHC.Types.Int)
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case Block1.$wgo a1 0# of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block1Spec.block138
                                  s
                                  (GHC.Maybe.Just @ GHC.Types.Int wild1)
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        0# -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } }) -}
6900997719e642b972aa7befee9ab33b
  block138 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
e1abe928622197caf9afcbbb394b6d58
  block139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block140) -}
7543f5f1832f373a09417de9864db934
  block14 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block15
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
ff68eca1d62548b3e1d283b7b655ef89
  block140 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty string"#) -}
cd40774ceea9acdd5a6c38f6e4a7c6ea
  block141 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block145
                   Block1Spec.block142
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
d3ed64f8802d6a63268bcb6ae336d592
  block142 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go
                        (GHC.CString.unpackCString# Block1Spec.block144) of wild {
                   GHC.Maybe.Nothing
                   -> case Block1Spec.block143 s (GHC.Maybe.Nothing @ GHC.Types.Int)
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case Block1.$wgo a1 0# of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block1Spec.block143
                                  s
                                  (GHC.Maybe.Just @ GHC.Types.Int wild1)
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        1234# -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } }) -}
ba861064e0114022f00fa7f673a62809
  block143 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
8e697e4808b284b72dc5cf32cc2d964d
  block144 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1234"#) -}
0fbe5beb0bedeeab2d4e1ba21c7048e0
  block145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block146) -}
fdca89d7f5b5d3a1beaf83948924ebc5
  block146 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sum of integer 4"#) -}
0afe1eb8dce13583825ab5fb2db2b76b
  block147 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block151
                   Block1Spec.block148
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
bbbc55da6774bf9e01119680add2473e
  block148 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go
                        (GHC.CString.unpackCString# Block1Spec.block150) of wild {
                   GHC.Maybe.Nothing
                   -> case Block1Spec.block149 s (GHC.Maybe.Nothing @ GHC.Types.Int)
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case Block1.$wgo a1 0# of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block1Spec.block149
                                  s
                                  (GHC.Maybe.Just @ GHC.Types.Int wild1)
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        0# -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } }) -}
834fffa846d164f8e8da93673e320a58
  block149 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
c3a68aab19a46336bed286b94ae4b7e8
  block15 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block17
                   Block1Spec.block16
                     `cast`
                   (Nth:3
                        (<(GHC.Base.String -> GHC.Base.String)
                          -> GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
8c7866321839de10e38ad2b1288190a3
  block150 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("0 0 0"#) -}
367aec21b96ab7cb135b9cc652fd4249
  block151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block152) -}
310f6adfb69db2b3b78212fdcc257d6c
  block152 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sum of integer 3"#) -}
024d637181291b0f57ec976f1111390f
  block153 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block157
                   Block1Spec.block154
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
9c065cd19bd2a8087add44bf7c87b9a1
  block154 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go
                        (GHC.CString.unpackCString# Block1Spec.block156) of wild {
                   GHC.Maybe.Nothing
                   -> case Block1Spec.block155 s (GHC.Maybe.Nothing @ GHC.Types.Int)
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case Block1.$wgo a1 0# of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block1Spec.block155
                                  s
                                  (GHC.Maybe.Just @ GHC.Types.Int wild1)
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        -2# -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } }) -}
b93bebab9f69818ebdc63fac6656a483
  block155 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
6e108b22b73ac11a59ed8d7fcc44e780
  block156 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 -6 3"#) -}
9fbbb24a362484bdd3012db574d4ab94
  block157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block158) -}
f0c68cbed114b570f6bc54ebaf0c7217
  block158 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sum of integer 2"#) -}
b8a555446ad4a16127872650c65dcd5a
  block159 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block1Spec.block163
                   Block1Spec.block160
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
9963ec23b635e37a7bef2d5c3afa249e
  block16 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock1 ww1 ww2 ww3 ww4 w1 }) -}
6f14d50e20fd5030c6a4e9fc5153ab26
  block160 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block1.stringSum_go
                        (GHC.CString.unpackCString# Block1Spec.block162) of wild {
                   GHC.Maybe.Nothing
                   -> case Block1Spec.block161 s (GHC.Maybe.Nothing @ GHC.Types.Int)
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case Block1.$wgo a1 0# of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block1Spec.block161
                                  s
                                  (GHC.Maybe.Just @ GHC.Types.Int wild1)
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        6# -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } }) -}
d17040a227c23ea495ea18558fea2fec
  block161 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe GHC.Types.Int
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
285f4d3cae60f604e4e47bf5864bbcbc
  block162 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1  2 3 "#) -}
fcf538a2a0df2028867f2cc2595923df
  block163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block164) -}
a3f7f8b9eca783e8e8b8235cbed58daf
  block164 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sum of integer 1"#) -}
e11b65f00ef47d9ed5e1dfa52f031598
  block165 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block166) -}
4d676f1a7cf2f5c896577975a1d356f6
  block166 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("stringSum test"#) -}
0ac0080968029f6c8b5c8fe3a7917040
  block167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block168) -}
1e093f790af78c05d1804810932f0697
  block168 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block1"#) -}
1a6edc5bae39c7ef7ba63955d55f2801
  block17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block18) -}
062eda247fd53f82e137527189b56b64
  block18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure f <*> pure x = pure (f x) (NonEmpty String)"#) -}
c3606374c10300509f2047d983d43699
  block19 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block21
                   Block1Spec.block20
                     `cast`
                   (Nth:3
                        (<(GHC.Types.Int -> GHC.Types.Int)
                          -> GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
e25d429d4ab3e26b1179b916b8ec655e
  block1_w1 ::
    (GHC.Types.Int -> GHC.Types.Int) -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S(S)),C(U(U))><L,U>,
     Unfolding: (\ (f :: GHC.Types.Int -> GHC.Types.Int)
                   (x :: GHC.Types.Int) ->
                 case Block1.$w$c<*>
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        f
                        (GHC.Types.[] @ (GHC.Types.Int -> GHC.Types.Int))
                        x
                        (GHC.Types.[] @ GHC.Types.Int) of ww6 { (#,#) ww7 ww8 ->
                 case ww7 of wild { GHC.Types.I# x1 ->
                 case f x of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.==# x1 y of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Classes.$fEq[]_$s$c==
                        ww8
                        (GHC.Types.[] @ GHC.Types.Int) } } } }) -}
86b0aa95d28776c842c9ab7012811d15
  block1_w10 ::
    (GHC.Base.String -> GHC.Base.String)
    -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: (\ (f :: GHC.Base.String -> GHC.Base.String)
                   (x :: GHC.Base.String) ->
                 Block1.$fEqTree_$c==
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Base.String
                      @ GHC.Base.String
                      (Block1.Leaf @ (GHC.Base.String -> GHC.Base.String) f)
                      (Block1.Leaf @ GHC.Base.String x))
                   (Block1.Leaf @ GHC.Base.String (f x))) -}
185c7cb6ff3eafff227d8a5809dbffb8
  block1_w11 ::
    (GHC.Types.Int -> GHC.Types.Int) -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: (\ (f :: GHC.Types.Int -> GHC.Types.Int)
                   (x :: GHC.Types.Int) ->
                 Block1.$fEqTree_$c==
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (Block1.Leaf @ (GHC.Types.Int -> GHC.Types.Int) f)
                      (Block1.Leaf @ GHC.Types.Int x))
                   (Block1.Leaf @ GHC.Types.Int (f x))) -}
c34ce9d1c9e1e22b6799d972ea595d50
  block1_w12 ::
    Block1.Tree (GHC.Base.String -> GHC.Base.String)
    -> Block1.Tree (GHC.Base.String -> GHC.Base.String)
    -> Block1.Tree GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Unfolding: (\ (u :: Block1.Tree
                           (GHC.Base.String -> GHC.Base.String))
                   (v :: Block1.Tree (GHC.Base.String -> GHC.Base.String))
                   (w :: Block1.Tree GHC.Base.String) ->
                 Block1.$fEqTree_$c==
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Base.String
                      @ GHC.Base.String
                      (Block1.$fApplicativeTree_$c<*>
                         @ (GHC.Base.String -> GHC.Base.String)
                         @ (GHC.Base.String -> GHC.Base.String)
                         (Block1.$fApplicativeTree_$c<*>
                            @ (GHC.Base.String -> GHC.Base.String)
                            @ ((GHC.Base.String -> GHC.Base.String)
                               -> GHC.Base.String -> GHC.Base.String)
                            Block1Spec.block77
                            u)
                         v)
                      w)
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Base.String
                      @ GHC.Base.String
                      u
                      (Block1.$fApplicativeTree_$c<*>
                         @ GHC.Base.String
                         @ GHC.Base.String
                         v
                         w))) -}
fc9a1ce422189098f372b380ba342c74
  block1_w13 ::
    Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
    -> Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
    -> Block1.Tree GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Unfolding: (\ (u :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                   (v :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int))
                   (w :: Block1.Tree GHC.Types.Int) ->
                 Block1.$fEqTree_$c==
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (Block1.$fApplicativeTree_$c<*>
                         @ (GHC.Types.Int -> GHC.Types.Int)
                         @ (GHC.Types.Int -> GHC.Types.Int)
                         (Block1.$fApplicativeTree_$c<*>
                            @ (GHC.Types.Int -> GHC.Types.Int)
                            @ ((GHC.Types.Int -> GHC.Types.Int)
                               -> GHC.Types.Int -> GHC.Types.Int)
                            Block1Spec.block82
                            u)
                         v)
                      w)
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      u
                      (Block1.$fApplicativeTree_$c<*>
                         @ GHC.Types.Int
                         @ GHC.Types.Int
                         v
                         w))) -}
0cb06d16aac39ce5a299e6efea084b14
  block1_w14 :: Block1.Tree GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tree :: Block1.Tree GHC.Base.String) ->
                 Block1.$fEqTree_$c==
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Base.String
                      @ GHC.Base.String
                      Block1Spec.block87
                      tree)
                   tree) -}
c967b8f2d3fd545832739cbf3e914af2
  block1_w15 :: Block1.Tree GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tree :: Block1.Tree GHC.Types.Int) ->
                 Block1.$fEqTree_$c==
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   (Block1.$fApplicativeTree_$c<*>
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Block1Spec.block92
                      tree)
                   tree) -}
9a84daaf68b7111c918b949e04367a33
  block1_w16 :: Block1.Tree GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (tree :: Block1.Tree GHC.Base.String) ->
                 Block1.$fEqTree_$c==
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   (Block1.$fApplicativeTree_$cfmap
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      Block1Spec.block37
                      tree)
                   (Block1.$fApplicativeTree_$cfmap
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      (GHC.List.reverse @ GHC.Types.Char)
                      (Block1.$fApplicativeTree_$cfmap
                         @ [GHC.Types.Char]
                         @ [GHC.Types.Char]
                         Block1Spec.block97
                         tree))) -}
78c455c46ba071c78a2253f19bb5fe0d
  block1_w17 :: Block1.Tree GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (tree :: Block1.Tree GHC.Types.Int) ->
                 Block1.$fEqTree_$c==
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   (Block1.$fApplicativeTree_$cfmap
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Block1Spec.block43
                      tree)
                   (Block1.$fApplicativeTree_$cfmap
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      Block1Spec.block103
                      (Block1.$fApplicativeTree_$cfmap
                         @ GHC.Types.Int
                         @ GHC.Types.Int
                         Block1Spec.block102
                         tree))) -}
15a886b158293a083a3d639b00dd9011
  block1_w18 :: Block1.Tree GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tree :: Block1.Tree GHC.Base.String) ->
                 Block1.$fEqTree_$c==
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   (Block1.$fApplicativeTree_$cfmap
                      @ GHC.Base.String
                      @ GHC.Base.String
                      (GHC.Base.id @ GHC.Base.String)
                      tree)
                   tree) -}
a6899550ddf839b5bce387ff820222db
  block1_w19 :: Block1.Tree GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tree :: Block1.Tree GHC.Types.Int) ->
                 Block1.$fEqTree_$c==
                   @ GHC.Types.Int
                   GHC.Classes.$fEqInt
                   (Block1.$fApplicativeTree_$cfmap
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (GHC.Base.id @ GHC.Types.Int)
                      tree)
                   tree) -}
c22298e474fe385df31f07db1d393554
  block1_w2 ::
    Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
    -> Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
    -> Block1.NonEmpty GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U,U)><S,1*U(U,U)><S,1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                   (w1 :: Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int))
                   (w2 :: Block1.NonEmpty GHC.Types.Int) ->
                 case w of ww { Block1.:| ww1 ww2 ->
                 case w1 of ww3 { Block1.:| ww4 ww5 ->
                 case w2 of ww6 { Block1.:| ww7 ww8 ->
                 Block1Spec.$ww4 ww1 ww2 ww4 ww5 ww7 ww8 } } }) -}
1a79ebbd443b224fec4d7b7e1fda7b93
  block1_w3 ::
    (GHC.Base.String -> GHC.Base.String)
    -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: (\ (f :: GHC.Base.String -> GHC.Base.String)
                   (x :: GHC.Base.String) ->
                 case Block1.$w$c<*>
                        @ GHC.Base.String
                        @ GHC.Base.String
                        f
                        (GHC.Types.[] @ (GHC.Base.String -> GHC.Base.String))
                        x
                        (GHC.Types.[] @ GHC.Base.String) of ww6 { (#,#) ww7 ww8 ->
                 case GHC.Classes.$fEqModule_$s$c== ww7 (f x) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$s$c==1
                        ww8
                        (GHC.Types.[] @ GHC.Base.String) } }) -}
168a8441f850492b47c3fd811de2ab61
  block1_w4 :: Block1.NonEmpty GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Block1.NonEmpty GHC.Base.String) ->
                 case w of ww { Block1.:| ww1 ww2 -> Block1Spec.$ww5 ww1 ww2 }) -}
ce0c3eec7da7ca27cf07f733a8400c2b
  block1_w5 :: Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)L),1*U(1*U(U),U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Block1.NonEmpty GHC.Types.Int) ->
                 case w of ww { Block1.:| ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 Block1Spec.$ww6 ww4 ww2 } }) -}
061d923cf25cfbdf26deb4cca6a5a371
  block1_w6 :: Block1.NonEmpty GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Block1.NonEmpty GHC.Base.String) ->
                 case w of ww { Block1.:| ww1 ww2 -> Block1Spec.$ww7 ww1 ww2 }) -}
1259c6dadcc86b0dcb0a313a590a4a1f
  block1_w7 :: Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Block1.NonEmpty GHC.Types.Int) ->
                 case w of ww { Block1.:| ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ipv ->
                 GHC.Classes.$fEq[]_$s$c==
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b1
                         (c :: GHC.Types.Int -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Int
                         @ b1
                         (GHC.Base.mapFB
                            @ GHC.Types.Int
                            @ b1
                            @ GHC.Types.Int
                            c
                            Block1Spec.block43)
                         n
                         ww2))
                   (GHC.Base.build
                      @ GHC.Types.Int
                      (\ @ b1
                         (c :: GHC.Types.Int -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Int
                         @ b1
                         (GHC.Base.mapFB
                            @ GHC.Types.Int
                            @ b1
                            @ GHC.Types.Int
                            c
                            Block1Spec.block43)
                         n
                         ww2)) } }) -}
3e146fa30583727061826334ead2d7bf
  block1_w8 :: Block1.NonEmpty GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Block1.NonEmpty GHC.Base.String) ->
                 case w of ww { Block1.:| ww1 ww2 -> Block1Spec.$ww8 ww1 ww2 }) -}
16dd9aed52f610bc8ae50b2e0cfc6a37
  block1_w9 :: Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (list :: Block1.NonEmpty GHC.Types.Int) ->
                 case list of wild { Block1.:| x xs ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 GHC.Classes.$fEq[]_$s$c== xs xs } }) -}
2e92c4688a70b209fd1104991cf5e238
  block2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block116
                   Block1Spec.block3) -}
e0d4800c2d0b68f890ccf9e487402374
  block20 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock2 ww1 ww2 ww3 ww4 w1 }) -}
7b6e9055cffe6d3c328c9ac49eed2838
  block21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block22) -}
550e0a70c48261c6d17b7d4cd9aada79
  block22 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure f <*> pure x = pure (f x) (NonEmpty Int)"#) -}
b0f88e7fd97eaba641171a15f8cb9e5e
  block23 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block25
                   Block1Spec.block24
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
                          -> Block1.NonEmpty (GHC.Types.Int -> GHC.Types.Int)
                          -> Block1.NonEmpty GHC.Types.Int
                          -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
62f962b8a46a1937979766f6211c14f2
  block24 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock3 ww1 ww2 ww3 ww4 w1 }) -}
60b13a5b504ab0f81308a860718d3812
  block25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block26) -}
3bb9f6441324738df4a7546a84a67924
  block26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure (.) <*> u <*> v <*> w = u <*> (v <*> w) (NonEmpty Int)"#) -}
7911d0f0ca4deebd150dab0ab07a0618
  block27 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block29
                   Block1Spec.block28
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
9cbad02c08977505ac13b1c340437b6d
  block28 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock4 ww1 ww2 ww3 ww4 w1 }) -}
92f8ec44b36157c75519c598ea3bea89
  block29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block30) -}
12ed1f39db8b7ecb04670f25e14737f8
  block3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block56
                   Block1Spec.block4) -}
b7af3d782d220dd4f50d2f2a8c7cfaa0
  block30 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure id <*> v == v (NonEmpty String)"#) -}
4fb97991e28756a004300c1da06d2af0
  block31 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block33
                   Block1Spec.block32
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
990e49b97ba47a892e05476ea9aedad3
  block32 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock5 ww1 ww2 ww3 ww4 w1 }) -}
4702e388ececb5fa48c1db1eba98d3d7
  block33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block34) -}
e33db792932f49b71bce1940a47e22bf
  block34 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure id <*> v == v (NonEmpty Int)"#) -}
35d91ae260f845897800d52716b4f92e
  block35 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block39
                   Block1Spec.block36
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
f6f87486ad6fe1fa0c23f2905a042d77
  block36 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock6 ww1 ww2 ww3 ww4 w1 }) -}
1077a377f53515efd4f01bc62b02a220
  block37 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 GHC.List.reverse1
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char Block1Spec.block38 x)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9199fe6453375b410f3551da3147f84f
  block38 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'x'#) -}
f1eb75687469f963131fd0fa82dfc7e0
  block39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block40) -}
a3ff64b3eb45c87d50999728ba45a0c9
  block4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block5
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
d29dd7d1ea18d04040ba60178ba89dd8
  block40 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fmap (f . g) == fmap f . fmap g (NonEmpty String)"#) -}
d4e19b13c672ebc4f89f3e6016589a3c
  block41 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block44
                   Block1Spec.block42
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
7613eb15d379e4b8b9b43e9598b61abf
  block42 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock7 ww1 ww2 ww3 ww4 w1 }) -}
eee52d0825cd1f3e08ed88b0685b9985
  block43 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 ->
                 GHC.Types.I# (GHC.Prim.+# 4# (GHC.Prim.*# 2# x1)) }) -}
788949e93f185a794ccc8c9e639f93bb
  block44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block45) -}
711c71752a8260130d388e8ea62baf28
  block45 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fmap (f . g) == fmap f . fmap g (NonEmpty Int)"#) -}
fc258f4c6ca49c20aa5caf44ee926bb1
  block46 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block48
                   Block1Spec.block47
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
b855adb7ce044270a75242e6c06fd913
  block47 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock8 ww1 ww2 ww3 ww4 w1 }) -}
a216785eb5af4336c06318a98d7017cc
  block48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block49) -}
dd3b661e2fa37a1035ef9f216daf81ee
  block49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fmap id == id (NonEmpty String)"#) -}
2f47c4f3ddabeb85285c03a922c4577e
  block5 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Block1Spec.block54
                   Block1Spec.block6) -}
3811e7541ccd5c6c2ccf676b27a2086a
  block50 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block52
                   Block1Spec.block51
                     `cast`
                   (Nth:3
                        (<Block1.NonEmpty GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
69911bc3cc6c5ddf8568c8afe8b230a8
  block51 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock9 ww1 ww2 ww3 ww4 w1 }) -}
b31051d7764519e3df2bb3c2a0599009
  block52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block53) -}
849b856db8c899ba28e9a9cc9540e3df
  block53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fmap id == id (NonEmpty Int)"#) -}
c0e279055785817e57a8c5a80f66d016
  block54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block55) -}
dd2144f5eec3ce0ed212cab3dacb5835
  block55 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NonEmpty typeclasses laws test"#) -}
6bd031b39efe4e859694e46cd63c0ab2
  block56 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Block1Spec.block114
                   Block1Spec.block57) -}
68cbda2284b6bfe2f9426fc48ff18592
  block57 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block110
                   Block1Spec.block58) -}
944527912da6336d448c6e5a56009f86
  block58 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block106
                   Block1Spec.block59) -}
5b6d16216517aae41c69a80274746059
  block59 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block100
                   Block1Spec.block60) -}
c5e3380a551d2ad04e42e1eb4cf35383
  block6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block50
                   Block1Spec.block7) -}
c3a6e99eb24dd174db0f6804cdf2c2ff
  block60 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block95
                   Block1Spec.block61) -}
421e97e716fc4f62803d24d1f3f0f676
  block61 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block90
                   Block1Spec.block62) -}
b660e1276ac90589fdae4afadb08f009
  block62 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block85
                   Block1Spec.block63) -}
8ab46b689197a6a4c54d487b0201ef65
  block63 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block80
                   Block1Spec.block64) -}
2b724c93bf76ebc950f3115250997302
  block64 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block75
                   Block1Spec.block65) -}
39147dfa3079749ea23f8779ee2f8855
  block65 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block71
                   Block1Spec.block66) -}
ac13c8f9b8591baed1656e67a6b5b58a
  block66 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block67
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
2c0a97e541159a2d6dd88c99dbf0b74f
  block67 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block69
                   Block1Spec.block68
                     `cast`
                   (Nth:3
                        (<(GHC.Base.String -> GHC.Base.String)
                          -> GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
2ac957500f8096b1ec517a6d8c73a614
  block68 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock10 ww1 ww2 ww3 ww4 w1 }) -}
658563f53f4b207b13146fcd08c0a48e
  block69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block70) -}
e7b4f62e4c47069610330813bfff2f43
  block7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block46
                   Block1Spec.block8) -}
1c487ca1d58ac83a83c50efc1b8fc242
  block70 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure f <*> pure x = pure (f x) (Tree String)"#) -}
92bb3c3023156a68d0a02893eaba5b3b
  block71 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block73
                   Block1Spec.block72
                     `cast`
                   (Nth:3
                        (<(GHC.Types.Int -> GHC.Types.Int)
                          -> GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
6f77ea20b7869aabc85cf788a179fb15
  block72 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock11 ww1 ww2 ww3 ww4 w1 }) -}
65474d7c725f16583f7a2e3514d81449
  block73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block74) -}
ec6766c98320b21524128e498acadfe5
  block74 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure f <*> pure x = pure (f x) (Tree Int)"#) -}
f8be26677359deb830a87e9ef8e6961a
  block75 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block78
                   Block1Spec.block76
                     `cast`
                   (Nth:3
                        (<Block1.Tree (GHC.Base.String -> GHC.Base.String)
                          -> Block1.Tree (GHC.Base.String -> GHC.Base.String)
                          -> Block1.Tree GHC.Base.String
                          -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
9e9fe74863ae39e2aa19e87aa9db5e23
  block76 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock12 ww1 ww2 ww3 ww4 w1 }) -}
182f52523453471f49800b071cc5087e
  block77 ::
    Block1.Tree
      ((GHC.Base.String -> GHC.Base.String)
       -> (GHC.Base.String -> GHC.Base.String)
       -> GHC.Base.String
       -> GHC.Base.String)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Block1.Leaf
                   @ ((GHC.Base.String -> GHC.Base.String)
                      -> (GHC.Base.String -> GHC.Base.String)
                      -> GHC.Base.String
                      -> GHC.Base.String)
                   (GHC.Base..
                      @ GHC.Base.String
                      @ GHC.Base.String
                      @ GHC.Base.String)) -}
3037e06f988c8d74848bdeccf77090ef
  block78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block79) -}
7ce21a50092e7e0d8ef3c26c7c78d005
  block79 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure (.) <*> u <*> v <*> w = u <*> (v <*> w) (Tree String)"#) -}
cc4903dd0ac71415655559ccd9286316
  block8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block41
                   Block1Spec.block9) -}
9fbb1919d6849191d3f921a6e4beb16a
  block80 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block83
                   Block1Spec.block81
                     `cast`
                   (Nth:3
                        (<Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
                          -> Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
                          -> Block1.Tree GHC.Types.Int
                          -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
ed1729b8b93485b65c74c03e3a40a2ec
  block81 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock13 ww1 ww2 ww3 ww4 w1 }) -}
431337ad15e62a35590b63165ac8aa58
  block82 ::
    Block1.Tree
      ((GHC.Types.Int -> GHC.Types.Int)
       -> (GHC.Types.Int -> GHC.Types.Int)
       -> GHC.Types.Int
       -> GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Block1.Leaf
                   @ ((GHC.Types.Int -> GHC.Types.Int)
                      -> (GHC.Types.Int -> GHC.Types.Int)
                      -> GHC.Types.Int
                      -> GHC.Types.Int)
                   (GHC.Base.. @ GHC.Types.Int @ GHC.Types.Int @ GHC.Types.Int)) -}
dc8239ef472e0487d6db64d38d07481e
  block83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block84) -}
e957c18e3073d529336a55e46644844b
  block84 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure (.) <*> u <*> v <*> w = u <*> (v <*> w) (Tree Int)"#) -}
b0217a8889f04b37f97cb2d0ae11b711
  block85 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block88
                   Block1Spec.block86
                     `cast`
                   (Nth:3
                        (<Block1.Tree GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
9df970869fbd16a8af6de4012354e889
  block86 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock14 ww1 ww2 ww3 ww4 w1 }) -}
93f5d5885ae17807bcbdaafc62d65875
  block87 :: Block1.Tree (GHC.Base.String -> GHC.Base.String)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Block1.Leaf
                   @ (GHC.Base.String -> GHC.Base.String)
                   (GHC.Base.id @ GHC.Base.String)) -}
e42deaa24c6c156bbc7b560f949a0320
  block88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block89) -}
02cb54c436c56dc5e049a3922e0275f5
  block89 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pure id <*> v == v (Tree String)"#) -}
28c1dc16f6a81019ae4af3b53ec851ca
  block9 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block1Spec.block35
                   Block1Spec.block10) -}
9db139dbd636d9be2d405639f526ebbf
  block90 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block93
                   Block1Spec.block91
                     `cast`
                   (Nth:3
                        (<Block1.Tree GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
24f3c5b9e5700d51ff595fdff4207979
  block91 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock15 ww1 ww2 ww3 ww4 w1 }) -}
6d613865465366656bf3fb3932aab160
  block92 :: Block1.Tree (GHC.Types.Int -> GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Block1.Leaf
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (GHC.Base.id @ GHC.Types.Int)) -}
e6f720774a169f800c63ba4018199c1f
  block93 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block94) -}
8d9144d525f939d496e17a550e8a9bee
  block94 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pure id <*> v == v (Tree Int)"#) -}
73cc89a74a09b29b2941866c651ea84a
  block95 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.QuickCheck.QC
                   Test.Tasty.QuickCheck.$fIsTestQC
                   Block1Spec.block98
                   Block1Spec.block96
                     `cast`
                   (Nth:3
                        (<Block1.Tree GHC.Base.String -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])) ; Sym (Test.Tasty.QuickCheck.N:QC[0]))) -}
3c0490c6402d4ef287a69019b836c4fb
  block96 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Block1Spec.$wblock16 ww1 ww2 ww3 ww4 w1 }) -}
cc243529eec3109be572b8f480564b9a
  block97 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Types.: @ GHC.Types.Char Block1Spec.block38) -}
c7b972f5fa1fa359891bfea9d9abfea8
  block98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block1Spec.block99) -}
59fbae201d1933239459203e6832b8ea
  block99 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fmap (f . g) == fmap f . fmap g (Tree String)"#) -}
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Block1.NonEmpty]
  = Block1Spec.$fArbitraryNonEmpty
instance [orphan] Test.QuickCheck.Arbitrary.Arbitrary [Block1.Tree]
  = Block1Spec.$fArbitraryTree
instance [orphan] GHC.Show.Show [->] = Block1Spec.$fShow->
instance [orphan] GHC.Show.Show [->] = Block1Spec.$fShow->0
"SPEC $carbitrary @ (Int -> Int)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                           (GHC.Types.Int -> GHC.Types.Int))
  Block1Spec.$fArbitraryNonEmpty3 @ (GHC.Types.Int -> GHC.Types.Int)
                                  $dArbitrary
  = Block1Spec.$fArbitraryNonEmpty_$s$carbitrary1
"SPEC $carbitrary @ Int" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                  GHC.Types.Int)
  Block1Spec.$fArbitraryNonEmpty3 @ GHC.Types.Int $dArbitrary
  = Block1Spec.$fArbitraryNonEmpty_$s$carbitrary
"SPEC $carbitrary @ [Char]" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                     [GHC.Types.Char])
  Block1Spec.$fArbitraryNonEmpty3 @ [GHC.Types.Char] $dArbitrary
  = Block1Spec.$fArbitraryNonEmpty_$s$carbitrary2
"SPEC $fArbitraryNonEmpty @ (Int -> Int)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                   (GHC.Types.Int -> GHC.Types.Int))
  Block1Spec.$fArbitraryNonEmpty @ (GHC.Types.Int -> GHC.Types.Int)
                                 $dArbitrary
  = Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty1
"SPEC $fArbitraryNonEmpty @ Int" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                          GHC.Types.Int)
  Block1Spec.$fArbitraryNonEmpty @ GHC.Types.Int $dArbitrary
  = Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty
"SPEC $fArbitraryNonEmpty @ [Char]" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                             [GHC.Types.Char])
  Block1Spec.$fArbitraryNonEmpty @ [GHC.Types.Char] $dArbitrary
  = Block1Spec.$fArbitraryNonEmpty_$s$fArbitraryNonEmpty2
"SPEC $fArbitraryTree @ (Int -> Int)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               (GHC.Types.Int -> GHC.Types.Int))
  Block1Spec.$fArbitraryTree @ (GHC.Types.Int -> GHC.Types.Int)
                             $dArbitrary
  = Block1Spec.$fArbitraryTree_$s$fArbitraryTree1
"SPEC $fArbitraryTree @ (String -> String)" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                     (GHC.Base.String
                                                                      -> GHC.Base.String))
  Block1Spec.$fArbitraryTree @ (GHC.Base.String -> GHC.Base.String)
                             $dArbitrary
  = Block1Spec.$fArbitraryTree_$s$fArbitraryTree3
"SPEC $fArbitraryTree @ Int" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                      GHC.Types.Int)
  Block1Spec.$fArbitraryTree @ GHC.Types.Int $dArbitrary
  = Block1Spec.$fArbitraryTree_$s$fArbitraryTree
"SPEC $fArbitraryTree @ [Char]" forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                         [GHC.Types.Char])
  Block1Spec.$fArbitraryTree @ [GHC.Types.Char] $dArbitrary
  = Block1Spec.$fArbitraryTree_$s$fArbitraryTree2
"SPEC/Block1Spec $fArbitrary-> @ Int @ Int" [orphan] forall (v1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                     GHC.Types.Int)
                                                            (v :: Test.QuickCheck.Arbitrary.CoArbitrary
                                                                    GHC.Types.Int)
  Test.QuickCheck.Arbitrary.$fArbitrary-> @ GHC.Types.Int
                                          @ GHC.Types.Int
                                          v
                                          v1
  = Block1Spec.$s$fArbitrary->
"SPEC/Block1Spec $fArbitrary-> @ [Char] @ [Char]" [orphan] forall (v1 :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           [GHC.Types.Char])
                                                                  (v :: Test.QuickCheck.Arbitrary.CoArbitrary
                                                                          [GHC.Types.Char])
  Test.QuickCheck.Arbitrary.$fArbitrary-> @ [GHC.Types.Char]
                                          @ [GHC.Types.Char]
                                          v
                                          v1
  = Block1Spec.$s$fArbitrary->1
"SPEC/Block1Spec $fArbitrary[] @ Char" [orphan] forall (v :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char v
  = Block1Spec.$s$fArbitrary->_$s$fArbitrary[]
"SPEC/Block1Spec $fArbitrary[]_$cshrink @ Char" [orphan] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                  GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Char
                                                   $dArbitrary
  = Block1Spec.$s$fArbitrary[]_$cshrink
"SPEC/Block1Spec $fShowNonEmpty @ (Int -> Int)" [orphan] forall (v :: GHC.Show.Show
                                                                        (GHC.Types.Int
                                                                         -> GHC.Types.Int))
  Block1.$fShowNonEmpty @ (GHC.Types.Int -> GHC.Types.Int) v
  = Block1Spec.$s$fShowNonEmpty
"SPEC/Block1Spec $fShowNonEmpty @ Int" [orphan] forall (v :: GHC.Show.Show
                                                               GHC.Types.Int)
  Block1.$fShowNonEmpty @ GHC.Types.Int v
  = Block1Spec.$s$fShowNonEmpty2
"SPEC/Block1Spec $fShowNonEmpty @ [Char]" [orphan] forall (v :: GHC.Show.Show
                                                                  [GHC.Types.Char])
  Block1.$fShowNonEmpty @ [GHC.Types.Char] v
  = Block1Spec.$s$fShowNonEmpty1
"SPEC/Block1Spec $fShowNonEmpty_$cshow @ [Char]" [orphan] [2] forall (w :: GHC.Show.Show
                                                                             [GHC.Types.Char])
  Block1.$fShowNonEmpty_$cshow @ [GHC.Types.Char] w
  = Block1Spec.$s$fShowNonEmpty_$cshow2
"SPEC/Block1Spec $fShowNonEmpty_$cshowList @ (Int -> Int)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                        (GHC.Types.Int
                                                                                         -> GHC.Types.Int))
  Block1.$fShowNonEmpty_$cshowList @ (GHC.Types.Int -> GHC.Types.Int)
                                   $dShow
  = Block1Spec.$s$fShowNonEmpty_$cshowList
"SPEC/Block1Spec $fShowNonEmpty_$cshowList @ Int" [orphan] forall ($dShow :: GHC.Show.Show
                                                                               GHC.Types.Int)
  Block1.$fShowNonEmpty_$cshowList @ GHC.Types.Int $dShow
  = Block1Spec.$s$fShowNonEmpty_$cshowList2
"SPEC/Block1Spec $fShowNonEmpty_$cshowList @ [Char]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                  [GHC.Types.Char])
  Block1.$fShowNonEmpty_$cshowList @ [GHC.Types.Char] $dShow
  = Block1Spec.$s$fShowNonEmpty_$cshowList1
"SPEC/Block1Spec $fShowNonEmpty_$cshowsPrec @ (Int -> Int)" [orphan] [2] forall (w :: GHC.Show.Show
                                                                                        (GHC.Types.Int
                                                                                         -> GHC.Types.Int))
  Block1.$fShowNonEmpty_$cshowsPrec @ (GHC.Types.Int
                                       -> GHC.Types.Int)
                                    w
  = Block1Spec.$s$fShowNonEmpty_$cshowsPrec
"SPEC/Block1Spec $fShowNonEmpty_$cshowsPrec @ Int" [orphan] [2] forall (w :: GHC.Show.Show
                                                                               GHC.Types.Int)
  Block1.$fShowNonEmpty_$cshowsPrec @ GHC.Types.Int w
  = Block1Spec.$s$fShowNonEmpty_$cshowsPrec2
"SPEC/Block1Spec $fShowNonEmpty_$cshowsPrec @ [Char]" [orphan] [2] forall (w :: GHC.Show.Show
                                                                                  [GHC.Types.Char])
  Block1.$fShowNonEmpty_$cshowsPrec @ [GHC.Types.Char] w
  = Block1Spec.$s$fShowNonEmpty_$cshowsPrec1
"SPEC/Block1Spec $fShowTree @ (Int -> Int)" [orphan] forall (v :: GHC.Show.Show
                                                                    (GHC.Types.Int
                                                                     -> GHC.Types.Int))
  Block1.$fShowTree @ (GHC.Types.Int -> GHC.Types.Int) v
  = Block1Spec.$s$fShowTree
"SPEC/Block1Spec $fShowTree @ (String -> String)" [orphan] forall (v :: GHC.Show.Show
                                                                          (GHC.Base.String
                                                                           -> GHC.Base.String))
  Block1.$fShowTree @ (GHC.Base.String -> GHC.Base.String) v
  = Block1Spec.$s$fShowTree1
"SPEC/Block1Spec $fShowTree @ Int" [orphan] forall (v :: GHC.Show.Show
                                                           GHC.Types.Int)
  Block1.$fShowTree @ GHC.Types.Int v = Block1Spec.$s$fShowTree3
"SPEC/Block1Spec $fShowTree @ [Char]" [orphan] forall (v :: GHC.Show.Show
                                                              [GHC.Types.Char])
  Block1.$fShowTree @ [GHC.Types.Char] v = Block1Spec.$s$fShowTree2
"SPEC/Block1Spec $fShowTree_$cshow @ (Int -> Int)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                (GHC.Types.Int
                                                                                 -> GHC.Types.Int))
  Block1.$fShowTree_$cshow @ (GHC.Types.Int -> GHC.Types.Int) $dShow
  = Block1Spec.$s$fShowTree_$cshow
"SPEC/Block1Spec $fShowTree_$cshow @ (String -> String)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                      (GHC.Base.String
                                                                                       -> GHC.Base.String))
  Block1.$fShowTree_$cshow @ (GHC.Base.String -> GHC.Base.String)
                           $dShow
  = Block1Spec.$s$fShowTree_$cshow1
"SPEC/Block1Spec $fShowTree_$cshow @ Int" [orphan] forall ($dShow :: GHC.Show.Show
                                                                       GHC.Types.Int)
  Block1.$fShowTree_$cshow @ GHC.Types.Int $dShow
  = Block1Spec.$s$fShowTree_$cshow3
"SPEC/Block1Spec $fShowTree_$cshow @ [Char]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                          [GHC.Types.Char])
  Block1.$fShowTree_$cshow @ [GHC.Types.Char] $dShow
  = Block1Spec.$s$fShowTree_$cshow2
"SPEC/Block1Spec $fShowTree_$cshowList @ (Int -> Int)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                    (GHC.Types.Int
                                                                                     -> GHC.Types.Int))
  Block1.$fShowTree_$cshowList @ (GHC.Types.Int -> GHC.Types.Int)
                               $dShow
  = Block1Spec.$s$fShowTree_$cshowList
"SPEC/Block1Spec $fShowTree_$cshowList @ (String -> String)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                          (GHC.Base.String
                                                                                           -> GHC.Base.String))
  Block1.$fShowTree_$cshowList @ (GHC.Base.String -> GHC.Base.String)
                               $dShow
  = Block1Spec.$s$fShowTree_$cshowList1
"SPEC/Block1Spec $fShowTree_$cshowList @ Int" [orphan] forall ($dShow :: GHC.Show.Show
                                                                           GHC.Types.Int)
  Block1.$fShowTree_$cshowList @ GHC.Types.Int $dShow
  = Block1Spec.$s$fShowTree_$cshowList3
"SPEC/Block1Spec $fShowTree_$cshowList @ [Char]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                              [GHC.Types.Char])
  Block1.$fShowTree_$cshowList @ [GHC.Types.Char] $dShow
  = Block1Spec.$s$fShowTree_$cshowList2
"SPEC/Block1Spec $fShowTree_$cshowsPrec @ (Int -> Int)" [orphan] [2] forall (w :: GHC.Show.Show
                                                                                    (GHC.Types.Int
                                                                                     -> GHC.Types.Int))
  Block1.$fShowTree_$cshowsPrec @ (GHC.Types.Int -> GHC.Types.Int) w
  = Block1Spec.$s$fShowTree_$cshowsPrec
"SPEC/Block1Spec $fShowTree_$cshowsPrec @ (String -> String)" [orphan] [2] forall (w :: GHC.Show.Show
                                                                                          (GHC.Base.String
                                                                                           -> GHC.Base.String))
  Block1.$fShowTree_$cshowsPrec @ (GHC.Base.String
                                   -> GHC.Base.String)
                                w
  = Block1Spec.$s$fShowTree_$cshowsPrec1
"SPEC/Block1Spec $fShowTree_$cshowsPrec @ Int" [orphan] [2] forall (w :: GHC.Show.Show
                                                                           GHC.Types.Int)
  Block1.$fShowTree_$cshowsPrec @ GHC.Types.Int w
  = Block1Spec.$s$fShowTree_$cshowsPrec3
"SPEC/Block1Spec $fShowTree_$cshowsPrec @ [Char]" [orphan] [2] forall (w :: GHC.Show.Show
                                                                              [GHC.Types.Char])
  Block1.$fShowTree_$cshowsPrec @ [GHC.Types.Char] w
  = Block1Spec.$s$fShowTree_$cshowsPrec2
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

