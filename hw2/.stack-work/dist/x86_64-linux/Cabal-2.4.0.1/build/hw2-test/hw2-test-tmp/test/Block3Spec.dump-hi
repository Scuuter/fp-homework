
==================== FINAL INTERFACE ====================
2019-03-27 21:03:57.906825611 UTC

interface main:Block3Spec 8064
  interface hash: adf1c7748633f9e00906cb432dd885ad
  ABI hash: c8eead5f2228b440aaa9ad60fae7b52f
  export-list hash: 8512f93646db5bc85bb22f8e83661b48
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d89b93d683606808bcc69427a2374468
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Block3Spec.block3
module dependencies:
package dependencies: ansi-terminal-0.8.2 ansi-wl-pprint-0.6.8.2
                      array-0.5.3.0 async-2.2.1 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-prim-0.5.3 hashable-1.2.7.0
                      hw2-0.1.0.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      optparse-applicative-0.14.3.0 process-1.6.5.0 stm-2.5.0.0
                      tagged-0.8.6 tasty-1.2 tasty-hunit-0.10.0.1 text-1.2.3.1
                      transformers-0.5.6.2 unbounded-delays-0.1.1.0 unix-2.7.2.2
                      wcwidth-0.0.2
orphans: stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.6.2:Control.Monad.Trans.Error
         colour-2.3.4:Data.Colour base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.6.0.1:Data.Graph
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         tagged-0.8.6:Data.Tagged tasty-1.2:Test.Tasty.Core
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Unicode 87726eb81a3f9c9b22160a0afd5dc56a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  hw2-0.1.0.0:Block3 eeddd9150b0dbf93385ddd5a8e52f07b
import  -/  tasty-1.2:Test.Tasty 3267efb6b9a17be2b049053c1cdaff08
import  -/  tasty-1.2:Test.Tasty.Core c931ee0793d03a746d590fb679c52fc6
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit 485b522d6b0c9a08b413dcdab322cf64
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit.Orig 594d4cc7224ef0dba5ea2ab140aa8238
ed4403c981941956d47489bafc502846
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Block3Spec.$trModule3
                   Block3Spec.$trModule1) -}
bd6a2c25b91e2cc792e5b0ef84d04a9f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block3Spec.$trModule2) -}
5cca5be8f733178fa3f137c0204a8e6d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block3Spec"#) -}
d3d28965a025ac6ae3ca7bdd4b853fad
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block3Spec.$trModule4) -}
20e1713a18c52206058084ae3b515eec
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f411c2fa8ceefd705f7f13a7802fa1db
  block1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block2
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
ea4f76e66539629cc8a9dc627de35143
  block10 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block138
                   Block3Spec.block11) -}
c38bc2a6a0ee3eb65b20bd7db639a463
  block100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block101) -}
a4e98c38972f80753a67c804e871e60e
  block101 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("stream 'reak' on 'Freak you'"#) -}
c9afb5627b2c32220f9f8cc985c41f34
  block102 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block109
                   Block3Spec.block103
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
2d6ab4b3620d67d7646a6e9ac2a10f13
  block103 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3Spec.block3_w5 of wild {
                   GHC.Maybe.Nothing
                   -> case Block3Spec.block108 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case a1 of ww3 { (,) ww4 ww5 ->
                      case GHC.Classes.$fEqModule_$s$c==
                             ww4
                             Block3Spec.block106 of wild1 {
                        GHC.Types.False
                        -> case Block3Spec.block108 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Base.eqString ww5 Block3Spec.block104 of wild2 {
                             GHC.Types.False
                             -> case Block3Spec.block108 s
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                of {}
                             GHC.Types.True
                             -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } }) -}
2742a5724dbe1a7ae4755661de0c4370
  block104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block105) -}
f5dc43eb4555656a4e344e0abb77743c
  block105 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" you"#) -}
424fd636f097bd2e941538554237b554
  block106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block107) -}
cb64c34989d06bb64820863e9f871cae
  block107 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Freak"#) -}
f776f06a46733d8de18c18fe99c5fa5f
  block108 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d2bb6f7eea825984aa8b62fcd09e5d16
  block109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block110) -}
163646906e830380a3bccd644d7ca282
  block11 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block131
                   Block3Spec.block12) -}
6951db32a8931a10466154f0f7dc5ca6
  block110 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("stream 'Freak' on 'Freak you'"#) -}
0733a8540554539d69c855d0a98b802c
  block111 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block114
                   Block3Spec.block112
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
06fef4533840dada712583976e90b60b
  block112 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Base.eqString
                        Block3Spec.block98
                        Block3Spec.block98 of wild {
                   GHC.Types.False
                   -> case Block3Spec.block113 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
c5bb22b8ea587bafdb05d1c4bc39b3f6
  block113 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7261eec0fee5ea95717ffbbb17490ca3
  block114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block115) -}
aae855a16631e7ebd1fffec1df9c7b4d
  block115 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("element F on 'Freak'"#) -}
0d13c13a0a1f2c9581a0454d5507b038
  block116 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block118
                   Block3Spec.block117
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
b2f179fdfada183719cfbdab06602468
  block117 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, GHC.Types.[] @ GHC.Types.Char #)) -}
13f7123560b87257fdb3d61fd62b9c88
  block118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block119) -}
de1216d05308585e8849df042ea1216c
  block119 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("element a on 'bbb'"#) -}
c1cca7a4ce7ff874ecccde57de017448
  block12 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block123
                   Block3Spec.block13) -}
734fc90c8fb1a00695eb3463f3ede456
  block120 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block121
                   Block3Spec.block117
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
23e454a93fe3676ab3238507dfa69d2c
  block121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block122) -}
f6d84f19421e74ab0cd70890e60cfd6f
  block122 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("element Nothing"#) -}
22aa74a8a0eca29dc4713ad576730cd8
  block123 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block129
                   Block3Spec.block124
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
fb2b0db6709fea1871cdeac327025c7d
  block124 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall base-4.12.0.0 GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        70#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 let {
                   $j :: GHC.Maybe.Maybe (GHC.Types.Char, [GHC.Types.Char])
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (w2 :: GHC.Maybe.Maybe
                                (GHC.Types.Char, [GHC.Types.Char]))[OneShot] ->
                     case w2 of wild {
                       GHC.Maybe.Nothing
                       -> case Block3Spec.block128
                                 s
                                 (GHC.Maybe.Nothing @ (GHC.Types.Char, [GHC.Types.Char]))
                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                          of {}
                       GHC.Maybe.Just a1
                       -> case a1 of ww3 { (,) ww4 ww5 ->
                          case ww4 of wild2 { GHC.Types.C# x ->
                          case x of wild3 {
                            DEFAULT
                            -> case Block3Spec.block128 s wild
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                               of {}
                            'F'#
                            -> case GHC.Base.eqString ww5 Block3Spec.block98 of wild4 {
                                 GHC.Types.False
                                 -> case Block3Spec.block128 s wild
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              [GHC.Types.Char] #)
                                    of {}
                                 GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } } }
                 } in
                 case ds1 of wild2 {
                   DEFAULT -> $j Block3Spec.block125
                   0#
                   -> $j
                        (GHC.Maybe.Nothing @ (GHC.Types.Char, [GHC.Types.Char])) } }) -}
7cd73956ab46d7744d1eefc4cdfce9b3
  block125 :: GHC.Maybe.Maybe (GHC.Types.Char, [GHC.Types.Char])
  {- Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ (GHC.Types.Char, [GHC.Types.Char])
                   Block3Spec.block126) -}
870fe67938248396e860364565b69bdb
  block126 :: (GHC.Types.Char, [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Block3Spec.block127, Block3Spec.block98)) -}
fc86e9c150bf8fe21b510fef1bfd4788
  block127 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'F'#) -}
664327367905e60b485381a50d27d101
  block128 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe (GHC.Types.Char, [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
39bc18f13576d13724f86109583075d8
  block129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block130) -}
3f062d281f7131f4435e2ce3d3a590fe
  block13 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block120
                   Block3Spec.block14) -}
c6fe1e0321847c9ab29618c2854b5ef5
  block130 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("satisfy isUpper"#) -}
a4adc19f198d58d2fae2241e2918b607
  block131 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block136
                   Block3Spec.block132
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
0c93461a2278fdb3f5d169cd46b86339
  block132 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fEq[]_$s$c==
                        Block3Spec.block134
                        Block3Spec.block134 of wild {
                   GHC.Types.False
                   -> case Block3Spec.block133 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
f0ffc286917695692d56ece50dd32d8c
  block133 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
639457b425e006435e65384d046f5f78
  block134 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Block3Spec.block135
                   (GHC.Types.[] @ GHC.Types.Int)) -}
481df5baf6ecbed98167897f4e1db482
  block135 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
050223e10d33baa8c4d3c7b2283e0d97
  block136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block137) -}
d83199a3fe552f3491f3b38a38f560d9
  block137 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("satisfy (>3)"#) -}
5af946bccadc377304934535086dd026
  block138 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block139
                   Block3Spec.block117
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
dea28cf0e98bf5c90cabefcff3ccc4f4
  block139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block140) -}
a980acbd197f8bcbed86edb4a0e2970a
  block14 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block116
                   Block3Spec.block15) -}
90104dad38ebfaff26a7fb86bf878557
  block140 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("satisfy Nothing []"#) -}
8626981b32b899628bd2a9e13add8586
  block141 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block142
                   Block3Spec.block117
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
a4e3dd06019c5be0a7ab04eaeed039c4
  block142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block143) -}
88771c798f152d208e430044d64d7c34
  block143 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("satisfy Nothing [Int]"#) -}
0f7c2ac9e127f96b880a1bf4ef2def3c
  block144 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block147
                   Block3Spec.block145
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
246e4d24649aa00a9018b7c6143dc93d
  block145 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Base.eqString
                        (GHC.Types.[] @ GHC.Types.Char)
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> case Block3Spec.block146 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
d9822bca8ad7bb61875d4f9ce446ea8d
  block146 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7f4cc6ff7c457ec7e2e6bded96c89029
  block147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block148) -}
7239f012505c7373100eb1240e6aa027
  block148 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eof 2"#) -}
5381edb526a8124053b76282614f2c5c
  block149 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block152
                   Block3Spec.block150
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
58575f0b1539e590be0208d4433e19a9
  block15 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block111
                   Block3Spec.block16) -}
5ce55ec84bf448da4b2c621979c85be4
  block150 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fEq[]_$s$c==
                        (GHC.Types.[] @ GHC.Types.Int)
                        (GHC.Types.[] @ GHC.Types.Int) of wild {
                   GHC.Types.False
                   -> case Block3Spec.block151 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
be6b38d9a447e258946226423d37da89
  block151 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
55ea2c398a52c5a7d89c6ece418f4216
  block152 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block153) -}
ed81bb2d88d7ff22891ceee3835de845
  block153 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eof 1"#) -}
230909b2a7d6ee9e02dda6afa0c71d1a
  block154 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block155
                   Block3Spec.block117
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
95718a87ef0bd4843e448e11236e5e09
  block155 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block156) -}
0e08fb63a0e37d0f0848de7761bad558
  block156 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eof Nothing"#) -}
830bcf2dc4c13c2034edb3f9d063e6b7
  block157 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block167
                   Block3Spec.block158
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
dd68e5f50008937cb6d5d5772096c7f3
  block158 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.$fEq[]_$s$c==
                        Block3Spec.block160
                        Block3Spec.block160 of wild {
                   GHC.Types.False
                   -> case Block3Spec.block159 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
211aced2dfa0f3ae24ad19764aa09558
  block159 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
129b8e83fdf6c63b0d30af908935e567
  block16 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block102
                   Block3Spec.block17) -}
fa2c13fa98e86427b06ae5169379ee95
  block160 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Block3Spec.block166
                   Block3Spec.block161) -}
61b7af4f17dde9f447d27c66c23eea3a
  block161 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Block3Spec.block135
                   Block3Spec.block162) -}
1d45c1c27c96cd3b2b2656b688fa0dc1
  block162 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Block3Spec.block165
                   Block3Spec.block163) -}
ec2c74d8a18a8cddb74cc6fb27b164c3
  block163 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Block3Spec.block164
                   (GHC.Types.[] @ GHC.Types.Int)) -}
2120c4b0f201aa698ad545683cb7296a
  block164 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
3e2a1f2cd2f87cf824835c8e0d16c5e7
  block165 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
7e329c8973f44207765bc18ef8167f40
  block166 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
6c32e965093bd91de3507e89af4ebe58
  block167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block168) -}
dc829cd15644fd95ba7c56eab8efc4fd
  block168 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ok 2"#) -}
dcd2227e17d3b9dfdb91cb047066e276
  block169 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block174
                   Block3Spec.block170
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
33f4bebd0a9ebca6d9bb567e27f009bb
  block17 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block93
                   Block3Spec.block18) -}
3fd1f504815ebfb9f4dd80920f0f4341
  block170 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Base.eqString
                        Block3Spec.block172
                        Block3Spec.block172 of wild {
                   GHC.Types.False
                   -> case Block3Spec.block171 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) }) -}
83fc97060a8c19a9cebfc015309db584
  block171 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
e696ca8bd4235433af14d0ed2f8cb956
  block172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block173) -}
add3ba9935433a4f0fbc698feb8b4e1d
  block173 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kek"#) -}
01a0278e112cf4639966e4757217c3f3
  block174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block175) -}
0887fb42418e35e0817f052a1fa5f1b2
  block175 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ok 1"#) -}
35b6c637e56a264ed7d5aedc69fddcba
  block176 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block177) -}
21a5b79531a10f8bfea969fd5b420a87
  block177 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test parsers and combinators"#) -}
269e72ba94a25a60a7a85d6240326416
  block178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block179) -}
b12abcbcc1856d4bed68f0b04dcbb88f
  block179 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block3"#) -}
50d365fe1c4e695b2f5b7ef8b487d53f
  block18 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block87
                   Block3Spec.block19) -}
a76b50961800ae8f7c67265193359575
  block19 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block79
                   Block3Spec.block20) -}
08c5e76124c14a1cf7a4a890a1171600
  block2 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Block3Spec.block176
                   Block3Spec.block4) -}
51912838a45826c03a4468cc21957442
  block20 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block73
                   Block3Spec.block21) -}
6a69cd9e1c0d565300423bed93bf72d1
  block21 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block67
                   Block3Spec.block22) -}
7def36fcb13e696379c6744868a739ed
  block22 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block62
                   Block3Spec.block23) -}
eeb24310aa679e1568d6aaa1e8947462
  block23 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block52
                   Block3Spec.block24) -}
fae029d3fc3d52689397af46e96534d1
  block24 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block44
                   Block3Spec.block25) -}
8463a129147e13fcba80e87110b2e5ce
  block25 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block36
                   Block3Spec.block26) -}
e1448728f887e0507703e446b6105c9c
  block26 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block27
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
3a7db2b3a9b167001646d7a7af84672f
  block27 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block34
                   Block3Spec.block28
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
54d0a0232635837447786fc99609dc45
  block28 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3.psp3 Block3.psp2 Block3Spec.block30 of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block3Spec.block29 s wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
c0eeab075089309e8bf216eaabc51b07
  block29 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe ([GHC.Types.Char], [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
51183cf3306256f8daa9ba5a3289500e
  block3 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Block3Spec.block178
                   Block3Spec.block1) -}
e661522f9b7d894f6e328c250cf0fb35
  block30 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Block3Spec.block33
                   Block3Spec.block31) -}
830ed912d972c87fd5fafd6260023fe9
  block31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block32) -}
3939b5d6a4b7047fc63e740bcd640b08
  block32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("())() a"#) -}
ccfbd48e6ca749de2911f648ac2e3ad7
  block33 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '('#) -}
6b88490e2c19b7f522777c5b58b25252
  block34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block35) -}
49cc580226b29ac7e9603fec00efeadb
  block35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psp '(())() a' == Nothing"#) -}
024b4a52809691ad6a7f4d3eec1836f7
  block36 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block42
                   Block3Spec.block37
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
dd9f0eb1898489fa93b48aa521911532
  block37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3.psp3 Block3.psp2 Block3Spec.block39 of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block3Spec.block38 s wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
b24b05825c29bf5818f0785ee2231a1d
  block38 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe ([GHC.Types.Char], [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
f11ed74010fa94a7930c22b5f4135477
  block39 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Block3Spec.block33
                   Block3Spec.block40) -}
f674d8428839ca22b7c4375a1f49118b
  block3_w1 :: GHC.Maybe.Maybe (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: (Block3.signedInt1
                   (GHC.CString.unpackCString# Block3Spec.block76)) -}
2bf968de93bb4cf67504705ec10e4cbf
  block3_w2 :: GHC.Maybe.Maybe (GHC.Base.String, [GHC.Types.Char])
  {- Unfolding: (Block3.psp3 Block3.psp2 Block3Spec.block57) -}
281e4051276305cda29b90f69c871095
  block3_w3 :: GHC.Maybe.Maybe (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: (Block3.signedInt1
                   (GHC.CString.unpackCString# Block3Spec.block84)) -}
7b453cb5da7cce4087f22de74df0510d
  block3_w4 :: GHC.Maybe.Maybe (GHC.Types.Int, [GHC.Types.Char])
  {- Unfolding: (Block3.signedInt1
                   (GHC.CString.unpackCString# Block3Spec.block90)) -}
c7918319fb829094e7b74644a83e82e7
  block3_w5 :: GHC.Maybe.Maybe ([GHC.Types.Char], [GHC.Types.Char])
  {- Unfolding: (Block3.stream1
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   (GHC.CString.unpackCString# Block3Spec.block107)
                   Block3Spec.block96) -}
824e1c3f2458fb3449a91f25a5eafcb5
  block4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block169
                   Block3Spec.block5) -}
89172b13f42fcb9574951c4b6417f608
  block40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block41) -}
bcc657b2d6860d82cc0e30c0521c2c20
  block41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("())(()"#) -}
de7f4370b8b9e09cb9f97f911e03242e
  block42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block43) -}
29c0c89525b1209b2b3b5623303792eb
  block43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psp '(())(()' == Nothing"#) -}
f1e46e8df743f8ce53754f373337735f
  block44 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block50
                   Block3Spec.block45
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
1de324bbb9db3c05e7754577338f5bd3
  block45 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3.psp3 Block3.psp2 Block3Spec.block47 of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block3Spec.block46 s wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
d5a9d7bc13d364e06d84fc5cdcb1bd65
  block46 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe ([GHC.Types.Char], [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
48d49c11e091a8f11dc322541a555084
  block47 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Block3Spec.block33
                   Block3Spec.block48) -}
7104cb979f0552f160b4342d997756b5
  block48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block49) -}
db7909fc586cca5b89be0a12843656bc
  block49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("()))"#) -}
8ab251306a3092ae343f3f8f2ab488e4
  block5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block157
                   Block3Spec.block6) -}
80ff4d89d82355d5817d0e6d535bac54
  block50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block51) -}
4ecf10f1fdb48bd28afbe9f8c0d8863b
  block51 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psp '(()))' == Nothing"#) -}
0d1bbc0067039d41079ea12f82bf3b9d
  block52 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block60
                   Block3Spec.block53
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
bf427f17f570cc83b1f1d5c5c30d0dc3
  block53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3Spec.block3_w2 of wild {
                   GHC.Maybe.Nothing
                   -> case Block3Spec.block56 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case a1 of ww3 { (,) ww4 ww5 ->
                      case GHC.Classes.$fEqModule_$s$c==
                             ww4
                             Block3Spec.block54 of wild1 {
                        GHC.Types.False
                        -> case Block3Spec.block56 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Base.eqString
                                  ww5
                                  (GHC.Types.[] @ GHC.Types.Char) of wild2 {
                             GHC.Types.False
                             -> case Block3Spec.block56 s
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                of {}
                             GHC.Types.True
                             -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } }) -}
2b00f711f8dfc5ee4588843a4083eb6f
  block54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block55) -}
4bca320a8b7ab6a12bd970770dc1ce95
  block55 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(())()"#) -}
355dd0d5a12c7da03f3b6986f620a412
  block56 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d12a1bc639c4a365e89b6d01e3a97311
  block57 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Block3Spec.block33
                   Block3Spec.block58) -}
e720470e9cff25221f3644fa04e48a72
  block58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block59) -}
a0d72c666130294df3567ceb203aeba7
  block59 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("())()"#) -}
85771f5f76eba6a1357bf1156e5d7bce
  block6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block154
                   Block3Spec.block7) -}
aaf89410596940b38984f0b799ae41a7
  block60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block61) -}
990292ed92d93332e9c05ef8f21ad1ff
  block61 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psp '(())()'"#) -}
9b145eb0c5ee067f41eff8317cc7a861
  block62 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block65
                   Block3Spec.block63
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
2057e130d2ce37b2e376b4539d824cec
  block63 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3.signedInt1 (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block3Spec.block64 s wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
2533d727d24954c638529d13bbce3bb2
  block64 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe (GHC.Types.Int, [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
db9eac461233621b2576167378d8c0e1
  block65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block66) -}
025b3c560f6c019dba2a2ef81df384a4
  block66 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("signedInt ''"#) -}
c4f639286d276d4561a12fc9eda30d82
  block67 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block71
                   Block3Spec.block68
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e3d147551969ab4bf111f244f761f6d0
  block68 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3.signedInt1
                        (GHC.CString.unpackCString# Block3Spec.block70) of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block3Spec.block69 s wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
7f0f931f91be300cdd4b782adf9beeac
  block69 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe (GHC.Types.Int, [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
342a8672c5c878227b6149b90bf3c871
  block7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block149
                   Block3Spec.block8) -}
a7ebcdbb7cc3edc89abcce78634325a2
  block70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nope"#) -}
58bea4d8e956ffd78cf10b596bb298a1
  block71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block72) -}
ebde9287936dd547568345d75a5e0d53
  block72 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("signedInt 'nope'"#) -}
4584d42bc30b4a88d7a3199f1accfa7b
  block73 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block77
                   Block3Spec.block74
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
737877884eb0b9c9e92374ee7d10bc9b
  block74 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3Spec.block3_w1 of wild {
                   GHC.Maybe.Nothing
                   -> case Block3Spec.block75 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case a1 of ww3 { (,) ww4 ww5 ->
                      case ww4 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block3Spec.block75 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        -1234#
                        -> case GHC.Base.eqString
                                  ww5
                                  (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                             GHC.Types.False
                             -> case Block3Spec.block75 s
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                of {}
                             GHC.Types.True
                             -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } } }) -}
4a2eefe68a2a532087a796831db3478b
  block75 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
340a481490ca709c5ee9cec276d83bb1
  block76 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-1234"#) -}
72199af9eedf5c6473ea68a4932ad029
  block77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block78) -}
819ea27b24a49280b8d2922441aef6c2
  block78 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("signedInt '-1234'"#) -}
f8641887ec7119a92fa2a5adaa73e40c
  block79 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block85
                   Block3Spec.block80
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
37b73e0f84ca0745fa379e6961b3bcae
  block8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block144
                   Block3Spec.block9) -}
88ce212983c66a8931aef41895493e2a
  block80 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3Spec.block3_w3 of wild {
                   GHC.Maybe.Nothing
                   -> case Block3Spec.block83 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case a1 of ww3 { (,) ww4 ww5 ->
                      case ww4 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block3Spec.block83 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        1234#
                        -> case GHC.Base.eqString ww5 Block3Spec.block81 of wild3 {
                             GHC.Types.False
                             -> case Block3Spec.block83 s
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                of {}
                             GHC.Types.True
                             -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } } }) -}
14f4da46c6d7b0cec325fd29024fd79f
  block81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block82) -}
0fa453f4d86c494ab1cc3d4bfd8666cf
  block82 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" a"#) -}
339c420d2aa7858d6ad0742def5a107e
  block83 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
1d2050c6f2fcdcd5204941ee08a6e0e8
  block84 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1234 a"#) -}
c048c32a3f9e80acdabc99c3bba0dcfd
  block85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block86) -}
5094c983dab1aedcf8d96f7e798a46a5
  block86 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("signedInt '1234 a' == Just (1234. ' a')"#) -}
d0b4c2f7d47aa90bbc0bb941d90c5c9e
  block87 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block91
                   Block3Spec.block88
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
8b1870f765d19ecf5e232de259396d7c
  block88 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3Spec.block3_w4 of wild {
                   GHC.Maybe.Nothing
                   -> case Block3Spec.block89 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Maybe.Just a1
                   -> case a1 of ww3 { (,) ww4 ww5 ->
                      case ww4 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case Block3Spec.block89 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        1234#
                        -> case GHC.Base.eqString
                                  ww5
                                  (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                             GHC.Types.False
                             -> case Block3Spec.block89 s
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                of {}
                             GHC.Types.True
                             -> (# s, GHC.Types.[] @ GHC.Types.Char #) } } } } }) -}
7d5385894bb3722de371b88c3b24b319
  block89 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
4d84f0d56f030a1d4e2f4ad91b5970da
  block9 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Block3Spec.block141
                   Block3Spec.block10) -}
fd6e3a4b9ce9cf0ff08e699ebeb8f489
  block90 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+1234"#) -}
e688c1b1acab2f80821770cc2b43c4bc
  block91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block92) -}
3fd4d7cc26fa62580ff08e629408a290
  block92 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("signedInt '+1234'"#) -}
87a4ef283277fed76b84f4d056c61289
  block93 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Block3Spec.block100
                   Block3Spec.block94
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
5799610a1cd6735ee33f2a35a7628e0a
  block94 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Block3.stream1
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        Block3Spec.block98
                        Block3Spec.block96 of wild {
                   GHC.Maybe.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Maybe.Just a1
                   -> case Block3Spec.block95 s wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
17c2e340d0ab3689f90f40820ade8797
  block95 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Maybe.Maybe ([GHC.Types.Char], [GHC.Types.Char])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
c8d9981c3ac5b24abb8ba45bef415324
  block96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block97) -}
5271fb8cb6710a4b32cc20cf9b62e1f7
  block97 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Freak you"#) -}
728f518dffc4937cac0657f35a296d3d
  block98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Block3Spec.block99) -}
328f89a4f30cdaa2971702e3efb393f0
  block99 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("reak"#) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

