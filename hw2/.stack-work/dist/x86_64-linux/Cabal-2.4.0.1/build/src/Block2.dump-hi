
==================== FINAL INTERFACE ====================
2019-03-27 10:06:34.510471013 UTC

interface hw2-0.1.0.0-IwL0rDAokyiBcdPpWKuXDH:Block2 8064
  interface hash: 97a02bada1200dc28a50ca7603e23837
  ABI hash: 7ca2d03b2b20fb38dd283c89ef6dae95
  export-list hash: 0f507d34b02dfc98bd87a62d76f03f22
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d59a86fc39dabe8754ebbfb830e37f1e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Block2.eval
  Block2.moving
  Block2.ArithmeticError{Block2.DivizionByZero Block2.NegativeExponent}
  Block2.Expr{Block2.Add Block2.Const Block2.Div Block2.Mul Block2.Pow Block2.Sub}
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 mtl-2.2.2 transformers-0.5.6.2
orphans: transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Applicative a884b39a373986c495ad27c23242ec88
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  transformers-0.5.6.2:Control.Monad.Trans.State.Lazy ff6ca0dfc09530bd7be56f884563f2c0
64d9bbcc3c67896c3e36d48be37e885d
  $fEqArithmeticError :: GHC.Classes.Eq Block2.ArithmeticError
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Block2.ArithmeticError
                  Block2.$fEqArithmeticError_$c==
                  Block2.$fEqArithmeticError_$c/= -}
64d9bbcc3c67896c3e36d48be37e885d
  $fEqArithmeticError_$c/= ::
    Block2.ArithmeticError -> Block2.ArithmeticError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Block2.ArithmeticError) (y :: Block2.ArithmeticError) ->
                 case x of wild {
                   Block2.DivizionByZero
                   -> case y of wild1 {
                        Block2.DivizionByZero -> GHC.Types.False
                        Block2.NegativeExponent -> GHC.Types.True }
                   Block2.NegativeExponent
                   -> case y of wild1 {
                        Block2.DivizionByZero -> GHC.Types.True
                        Block2.NegativeExponent -> GHC.Types.False } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fEqArithmeticError_$c== ::
    Block2.ArithmeticError -> Block2.ArithmeticError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Block2.ArithmeticError)
                   (ds1 :: Block2.ArithmeticError) ->
                 case ds of wild {
                   Block2.DivizionByZero
                   -> case ds1 of wild1 {
                        Block2.DivizionByZero -> GHC.Types.True
                        Block2.NegativeExponent -> GHC.Types.False }
                   Block2.NegativeExponent
                   -> case ds1 of wild1 {
                        Block2.DivizionByZero -> GHC.Types.False
                        Block2.NegativeExponent -> GHC.Types.True } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError :: GHC.Classes.Ord Block2.ArithmeticError
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Block2.ArithmeticError
                  Block2.$fEqArithmeticError
                  Block2.$fOrdArithmeticError_$ccompare
                  Block2.$fOrdArithmeticError_$c<
                  Block2.$fOrdArithmeticError_$c<=
                  Block2.$fOrdArithmeticError_$c>
                  Block2.$fOrdArithmeticError_$c>=
                  Block2.$fOrdArithmeticError_$cmax
                  Block2.$fOrdArithmeticError_$cmin -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$c< ::
    Block2.ArithmeticError -> Block2.ArithmeticError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Block2.ArithmeticError) (b :: Block2.ArithmeticError) ->
                 case a of wild {
                   Block2.DivizionByZero
                   -> case b of wild1 {
                        Block2.DivizionByZero -> GHC.Types.False
                        Block2.NegativeExponent -> GHC.Types.True }
                   Block2.NegativeExponent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$c<= ::
    Block2.ArithmeticError -> Block2.ArithmeticError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Block2.ArithmeticError) (b :: Block2.ArithmeticError) ->
                 case b of wild {
                   Block2.DivizionByZero
                   -> case a of wild1 {
                        Block2.DivizionByZero -> GHC.Types.True
                        Block2.NegativeExponent -> GHC.Types.False }
                   Block2.NegativeExponent
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$c> ::
    Block2.ArithmeticError -> Block2.ArithmeticError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Block2.ArithmeticError) (b :: Block2.ArithmeticError) ->
                 Block2.$fOrdArithmeticError_$c< b a) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$c>= ::
    Block2.ArithmeticError -> Block2.ArithmeticError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Block2.ArithmeticError) (b :: Block2.ArithmeticError) ->
                 case a of wild {
                   Block2.DivizionByZero
                   -> case b of wild1 {
                        Block2.DivizionByZero -> GHC.Types.True
                        Block2.NegativeExponent -> GHC.Types.False }
                   Block2.NegativeExponent
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$ccompare ::
    Block2.ArithmeticError
    -> Block2.ArithmeticError -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Block2.ArithmeticError) (b :: Block2.ArithmeticError) ->
                 case a of wild {
                   Block2.DivizionByZero
                   -> case b of wild1 {
                        Block2.DivizionByZero -> GHC.Types.EQ
                        Block2.NegativeExponent -> GHC.Types.LT }
                   Block2.NegativeExponent
                   -> case b of wild1 {
                        Block2.DivizionByZero -> GHC.Types.GT
                        Block2.NegativeExponent -> GHC.Types.EQ } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$cmax ::
    Block2.ArithmeticError
    -> Block2.ArithmeticError -> Block2.ArithmeticError
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Block2.ArithmeticError) (y :: Block2.ArithmeticError) ->
                 case y of wild {
                   Block2.DivizionByZero -> x
                   Block2.NegativeExponent
                   -> case x of wild1 { DEFAULT -> Block2.NegativeExponent } }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fOrdArithmeticError_$cmin ::
    Block2.ArithmeticError
    -> Block2.ArithmeticError -> Block2.ArithmeticError
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Block2.ArithmeticError) (y :: Block2.ArithmeticError) ->
                 case y of wild {
                   Block2.DivizionByZero
                   -> case x of wild1 { DEFAULT -> Block2.DivizionByZero }
                   Block2.NegativeExponent -> x }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fShowArithmeticError :: GHC.Show.Show Block2.ArithmeticError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Block2.ArithmeticError
                  Block2.$fShowArithmeticError_$cshowsPrec
                  Block2.$fShowArithmeticError_$cshow
                  Block2.$fShowArithmeticError_$cshowList -}
64d9bbcc3c67896c3e36d48be37e885d
  $fShowArithmeticError1 :: Block2.ArithmeticError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Block2.ArithmeticError) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Block2.DivizionByZero
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Block2.$fShowArithmeticError4)
                        eta
                   Block2.NegativeExponent
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Block2.$fShowArithmeticError2)
                        eta }) -}
4eb520f35584b2c5a1b0281350671f3c
  $fShowArithmeticError2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Block2.$fShowArithmeticError3) -}
16cb8eb293fb18078c7a35aa6f55fdcb
  $fShowArithmeticError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NegativeExponent"#) -}
2fcf77058381cf25ecbd0df043c9aaa2
  $fShowArithmeticError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Block2.$fShowArithmeticError5) -}
ecdbbb6b8513ae60193fee41db6aed3e
  $fShowArithmeticError5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DivizionByZero"#) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fShowArithmeticError_$cshow ::
    Block2.ArithmeticError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Block2.ArithmeticError) ->
                 case x of wild {
                   Block2.DivizionByZero -> Block2.$fShowArithmeticError4
                   Block2.NegativeExponent -> Block2.$fShowArithmeticError2 }) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fShowArithmeticError_$cshowList ::
    [Block2.ArithmeticError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block2.ArithmeticError]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Block2.ArithmeticError
                   Block2.$fShowArithmeticError1
                   ls
                   s) -}
64d9bbcc3c67896c3e36d48be37e885d
  $fShowArithmeticError_$cshowsPrec ::
    GHC.Types.Int -> Block2.ArithmeticError -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Block2.ArithmeticError)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Block2.DivizionByZero
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Block2.$fShowArithmeticError4)
                        eta
                   Block2.NegativeExponent
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Block2.$fShowArithmeticError2)
                        eta }) -}
9e4fe1f8d11adce03938ead2d9ed5a3c
  $fShowExpr :: GHC.Show.Show Block2.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Block2.Expr
                  Block2.$fShowExpr_$cshowsPrec
                  Block2.$fShowExpr_$cshow
                  Block2.$fShowExpr_$cshowList -}
9e4fe1f8d11adce03938ead2d9ed5a3c
  $fShowExpr1 :: Block2.Expr -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Block2.Expr) (w1 :: GHC.Base.String) ->
                 Block2.$w$cshowsPrec 0# w w1) -}
43eae9a589403734e372a93477580ef9
  $fShowExpr2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9e4fe1f8d11adce03938ead2d9ed5a3c
  $fShowExpr_$cshow :: Block2.Expr -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Block2.Expr) ->
                 Block2.$fShowExpr_$cshowsPrec
                   Block2.$fShowExpr2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9e4fe1f8d11adce03938ead2d9ed5a3c
  $fShowExpr_$cshowList :: [Block2.Expr] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Block2.Expr]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Block2.Expr Block2.$fShowExpr1 ls s) -}
9e4fe1f8d11adce03938ead2d9ed5a3c
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Block2.Expr -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Block2.Expr)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Block2.$w$cshowsPrec ww1 w1 w2 }) -}
9c225fefdfe6f406aba1f40564f38f5b
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4095879379110105389##
                   12173145885499906775##
                   Block2.$trModule
                   Block2.$tc'Add2
                   0#
                   Block2.$tc'Add1) -}
82f1ee1ad0a2d430fd8f75ea78b34c7a
  $tc'Add1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
70e3979ac45a02e0defce04e881fe761
  $tc'Add2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'Add3) -}
3d132ce94ca0257ad1aa875ed9a1a0de
  $tc'Add3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Add"#) -}
0fce62cb09cf99a6797d5d315d1d4d07
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10538546884379507436##
                   13888784016031739545##
                   Block2.$trModule
                   Block2.$tc'Const2
                   0#
                   Block2.$tc'Const1) -}
f733779593df87a26b8a1fbfd680a108
  $tc'Const1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1b80f0c953fefcd048b9061766ae59c7
  $tc'Const2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'Const3) -}
2ce03466ff61ec49dd187fcf4fc5a67e
  $tc'Const3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Const"#) -}
ef6804874eb98c625f6c89aaba2d7392
  $tc'Div :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8208397997651812925##
                   7826819003152987179##
                   Block2.$trModule
                   Block2.$tc'Div1
                   0#
                   Block2.$tc'Add1) -}
5ae59c9fb370e40d236342cfb8265653
  $tc'Div1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'Div2) -}
088e6bc919ce5365051b6a07ebe22618
  $tc'Div2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Div"#) -}
cce7aba9960ea211981fcd11961aca66
  $tc'DivizionByZero :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4930246074592482604##
                   1295969734690313569##
                   Block2.$trModule
                   Block2.$tc'DivizionByZero2
                   0#
                   Block2.$tc'DivizionByZero1) -}
2dc5bd32736597077f8612e04ea10b80
  $tc'DivizionByZero1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
7d772ade47598ac35c20a04830c90c80
  $tc'DivizionByZero2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'DivizionByZero3) -}
00b64eabd03aea373c4f05d7b3f9429e
  $tc'DivizionByZero3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DivizionByZero"#) -}
a2e08f2bdf057d60eee83c999ac3a2c4
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5380089637975741485##
                   17961079260885876974##
                   Block2.$trModule
                   Block2.$tc'Mul1
                   0#
                   Block2.$tc'Add1) -}
6fe53d2461f4d165cca56b21b69c6f84
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'Mul2) -}
85bf1b5c260d1a946c1c7196f4867152
  $tc'Mul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Mul"#) -}
4793a77b1c914ed3a1d3285497129696
  $tc'NegativeExponent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6846856121929072599##
                   9656959309291349375##
                   Block2.$trModule
                   Block2.$tc'NegativeExponent1
                   0#
                   Block2.$tc'DivizionByZero1) -}
b5b88172897b6a8a6b46d63ac55403b8
  $tc'NegativeExponent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'NegativeExponent2) -}
343bcf3d0a2928ba00041134a59c9a0d
  $tc'NegativeExponent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NegativeExponent"#) -}
6948e5a1315ec92d7d398a18ef00e886
  $tc'Pow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5618609122827694875##
                   6166951065597947123##
                   Block2.$trModule
                   Block2.$tc'Pow1
                   0#
                   Block2.$tc'Add1) -}
28a23c601199dbf3f986ca238cf6def0
  $tc'Pow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'Pow2) -}
831851bfcd04252fb05b9d9cc91d0f0c
  $tc'Pow2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pow"#) -}
0551937a6a8872fe348edb24a9519165
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7573001097471510482##
                   17210196396460916752##
                   Block2.$trModule
                   Block2.$tc'Sub1
                   0#
                   Block2.$tc'Add1) -}
da9b207dc60f464b39cf267bade3b320
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tc'Sub2) -}
fcdb815b0a24c34acc5b1db89a0963ca
  $tc'Sub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sub"#) -}
7fb1b05ade70beb0fb7f9c242deec554
  $tcArithmeticError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3391674873098218674##
                   603539697719197931##
                   Block2.$trModule
                   Block2.$tcArithmeticError1
                   0#
                   GHC.Types.krep$*) -}
19c5ae30443ea51315b098d34971d0c4
  $tcArithmeticError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tcArithmeticError2) -}
ef93f705b6a4d27c791ea65915103b8f
  $tcArithmeticError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArithmeticError"#) -}
891389f665a3b6208f9a611689f8689f
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5306177098086022481##
                   12539705769488679121##
                   Block2.$trModule
                   Block2.$tcExpr1
                   0#
                   GHC.Types.krep$*) -}
1802dc052b64b2e8758721b366abfb7e
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$tcExpr2) -}
416b378c9b81f3a8b5c36018484828af
  $tcExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expr"#) -}
a5a04c85b1b38a9c419dc71d0e3a99d1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Block2.$trModule3
                   Block2.$trModule1) -}
22a5c3ec3f91dd11eed368e1f02cee37
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$trModule2) -}
e4ad840ce15d62660354e061a9576ad7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Block2"#) -}
bc03301f7f269a8b9ac68a992f4a22e0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Block2.$trModule4) -}
2dedf9b312d0776b89ef52f3baaa0c40
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("hw2-0.1.0.0-IwL0rDAokyiBcdPpWKuXDH"#) -}
9e4fe1f8d11adce03938ead2d9ed5a3c
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Block2.Expr -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,1*U><L,U>,
     Inline: [2] -}
64d9bbcc3c67896c3e36d48be37e885d
  data ArithmeticError = DivizionByZero | NegativeExponent
9e4fe1f8d11adce03938ead2d9ed5a3c
  data Expr
    = Add Block2.Expr Block2.Expr
    | Sub Block2.Expr Block2.Expr
    | Mul Block2.Expr Block2.Expr
    | Div Block2.Expr Block2.Expr
    | Pow Block2.Expr Block2.Expr
    | Const GHC.Types.Int
da55b619541f957ed3118f836f010af8
  eval ::
    Block2.Expr
    -> Data.Either.Either Block2.ArithmeticError GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
24bdf93a8313aa71aa164344179f73f4
  moving :: GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Double]
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (size :: GHC.Types.Int) (list :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                 let {
                   arr :: [GHC.Types.Double]
                   = GHC.Base.map
                       @ GHC.Types.Int
                       @ GHC.Types.Double
                       GHC.Float.RealFracMethods.int2Double
                       list
                 } in
                 letrec {
                   $wloop :: GHC.Prim.Int#
                             -> GHC.Types.Int
                             -> GHC.Types.Double
                             -> [GHC.Types.Double]
                             -> [GHC.Types.Double]
                     <join 4> {- Arity: 4, Strictness: <S,U><L,U(U)><L,1*U(U)><L,U>,
                                 Inline: [2] -}
                   = \ (ww :: GHC.Prim.Int#)
                       (ww1 :: GHC.Types.Int)
                       (ww3 :: GHC.Types.Double)
                       (ww4 :: [GHC.Types.Double]) ->
                     case GHC.Prim.<=# ww 0# of lwild {
                       DEFAULT
                       -> let {
                            summ :: GHC.Types.Double
                            = case ww3 of wild { GHC.Types.D# x ->
                              case ww1 of wild1 { GHC.Types.I# x1 ->
                              case size of wild2 { GHC.Types.I# y ->
                              case GHC.Prim.<# (GHC.Prim.-# x1 y) 0# of lwild1 {
                                DEFAULT
                                -> case GHC.List.$w!!
                                          @ GHC.Types.Double
                                          arr
                                          (GHC.Prim.-# x1 y) of wild3 { GHC.Types.D# y1 ->
                                   case GHC.List.$w!!
                                          @ GHC.Types.Double
                                          arr
                                          x1 of wild4 { GHC.Types.D# y2 ->
                                   GHC.Types.D# (GHC.Prim.+## (GHC.Prim.-## x y1) y2) } }
                                1#
                                -> case GHC.List.$w!!
                                          @ GHC.Types.Double
                                          arr
                                          x1 of wild3 { GHC.Types.D# y1 ->
                                   GHC.Types.D# (GHC.Prim.+## x y1) } } } } }
                          } in
                          $wloop
                            (GHC.Prim.-# ww 1#)
                            (case ww1 of wild { GHC.Types.I# x ->
                             GHC.Types.I# (GHC.Prim.+# x 1#) })
                            summ
                            (GHC.Types.:
                               @ GHC.Types.Double
                               (case summ of wild { GHC.Types.D# x ->
                                case ww1 of wild1 { GHC.Types.I# x1 ->
                                case size of wild2 { GHC.Types.I# y1 ->
                                let {
                                  x2 :: GHC.Prim.Int# = GHC.Prim.+# x1 1#
                                } in
                                case GHC.Prim.<=# x2 y1 of lwild1 {
                                  DEFAULT
                                  -> case GHC.Prim./##
                                            x
                                            (GHC.Prim.int2Double# y1) of wild3 { DEFAULT ->
                                     GHC.Types.D# wild3 }
                                  1#
                                  -> case GHC.Prim./##
                                            x
                                            (GHC.Prim.int2Double# x2) of wild3 { DEFAULT ->
                                     GHC.Types.D# wild3 } } } } })
                               ww4)
                       1#
                       -> GHC.List.reverse1
                            @ GHC.Types.Double
                            ww4
                            (GHC.Types.[] @ GHC.Types.Double) }
                 } in
                 $wloop
                   ww2
                   Block2.$fShowExpr2
                   Block2.moving1
                   (GHC.Types.[] @ GHC.Types.Double) }) -}
d46d3911eeca63498803b4f5b4af20ed
  moving1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
instance [safe] GHC.Classes.Eq [Block2.ArithmeticError]
  = Block2.$fEqArithmeticError
instance [safe] GHC.Classes.Ord [Block2.ArithmeticError]
  = Block2.$fOrdArithmeticError
instance [safe] GHC.Show.Show [Block2.ArithmeticError]
  = Block2.$fShowArithmeticError
instance [safe] GHC.Show.Show [Block2.Expr] = Block2.$fShowExpr
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

